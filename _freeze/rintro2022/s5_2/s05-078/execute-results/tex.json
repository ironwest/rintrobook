{
  "hash": "d062af18ef85370937d0bb9a8730001e",
  "result": {
    "markdown": "---\ntitle: 人口動態統計データの加工1\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nここからは、data/mc360000.csvファイルのデータを加工していきます。\n\nセクション5で解説した関数以外も少し登場します。\n\nこのデータは、\n\nhttps://www.e-stat.go.jp/stat-search/files?page=1&layout=datalist&toukei=00450011&tstat=000001028897&cycle=7&year=20190&month=0&tclass1=000001053058&tclass2=000001053061&tclass3=000001053065&stat_infid=000031982775&result_back=1&tclass4val=0\n\n政府統計の総合窓口、\n\n自殺による死因（三桁基本分類）別にみた性・年次別死亡数及び百分率\n\nをダウンロードしたそのままのものです。\n\n一切エクセル等でデータの加工をすることなく、RのみでTidyにしていきましょう!\n\nまずはインポート!\n\nの前にデータを眺めましょう。\n\nRStudioでCSVファイルを開くと中身をテキストファイルとして見れます。\n\nまず、普通にひらくと文字化けしているので、File Reopenwith Encodingでshift-jisを選びましょうそうすると、最初の3行は注意書きになっており、これをインポートしてしまうとまずいです。\n\nということで、文字コードはshift-jisで、最初の3行を飛ばしてインポートしましょう。また、列名はあってないようなものなので、列名はつけない設定にしましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\n  file = \"data/mc360000.csv\", \n  locale=locale(encoding=\"shift-jis\"),\n  skip = 3, \n  col_names = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 29 Columns: 61\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (61): X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, ...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nView(dat)\n```\n:::\n\n\n\nX2列に総数が一番上にきていて、これは、ファイルの4行目の総数と一致しており、狙った行からインポートできています。\n\nここで、ちょっと補足なのですが、skipの値はcol_namesで列名をTRUEとした場合とFALSEとした場合で同じ値を指定していても違う結果になります。\n\n例として、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_shiftjis <- locale(encoding=\"shift-jis\")\n\nread_csv(\"data/skip.csv\", locale=use_shiftjis)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 11 Columns: 1\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (1): 行1\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 x 1\n   行1  \n   <chr>\n 1 行2  \n 2 行3  \n 3 行4  \n 4 行5  \n 5 行6  \n 6 行7  \n 7 行8  \n 8 行9  \n 9 行10 \n10 行11 \n11 行12 \n```\n:::\n\n```{.r .cell-code}\nread_csv(\"data/skip.csv\", locale=use_shiftjis, skip=3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 8 Columns: 1\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (1): 行4\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 x 1\n  行4  \n  <chr>\n1 行5  \n2 行6  \n3 行7  \n4 行8  \n5 行9  \n6 行10 \n7 行11 \n8 行12 \n```\n:::\n\n```{.r .cell-code}\nread_csv(\"data/skip.csv\", locale=use_shiftjis, skip=3, col_name=FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 9 Columns: 1\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (1): X1\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 x 1\n  X1   \n  <chr>\n1 行4  \n2 行5  \n3 行6  \n4 行7  \n5 行8  \n6 行9  \n7 行10 \n8 行11 \n9 行12 \n```\n:::\n:::\n\n\n\n行1 |\n行2 | skip=3 で行1から3までが飛ばされる\n行3 |\n行4  <- col_name=TRUEだとここが列名に\n行5  <- データはここからはじまる。\n行6\n\n行1 |\n行2 | skip=3 で行1から3までが飛ばされる\n行3 |\n行4  <- col_name=FALSEだとデータはここからはじまる\n行5  \n行6\n\nこんな感じです。\n\nさて、次の動画では、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 x 61\n   X1    X2    X3    X4    X5    X6    X7    X8    X9    X10   X11   X12   X13  \n   <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n 1 <NA>  総数  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 2 <NA>  死亡~ <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  百分~ <NA> \n 3 <NA>  1995  2000  2005  2010  2014  2015  2016  2017  2018  2019  1995  2000 \n 4 X60-~ 21420 30251 30553 29554 24417 23152 21021 20468 20031 19425 100   100  \n 5 X60~  8     10    7     8     7     6     5     4     4     10    0     0    \n 6 X61~  235   359   375   307   240   200   191   148   170   162   1.1   1.2  \n 7 X62~  -     1     3     -     2     1     2     2     1     -     -     0    \n 8 X63~  1     1     3     -     2     3     -     -     -     -     0     0    \n 9 X64~  111   164   197   187   158   176   165   162   161   151   0.5   0.5  \n10 X65~  1     4     5     4     10    3     6     3     4     3     0     0    \n# i 19 more rows\n# i 48 more variables: X14 <chr>, X15 <chr>, X16 <chr>, X17 <chr>, X18 <chr>,\n#   X19 <chr>, X20 <chr>, X21 <chr>, X22 <chr>, X23 <chr>, X24 <chr>,\n#   X25 <chr>, X26 <chr>, X27 <chr>, X28 <chr>, X29 <chr>, X30 <chr>,\n#   X31 <chr>, X32 <chr>, X33 <chr>, X34 <chr>, X35 <chr>, X36 <chr>,\n#   X37 <chr>, X38 <chr>, X39 <chr>, X40 <chr>, X41 <chr>, X42 <chr>,\n#   X43 <chr>, X44 <chr>, X45 <chr>, X46 <chr>, X47 <chr>, X48 <chr>, ...\n```\n:::\n:::\n\n\n\nの加工をつづけていきましょう。\n\n",
    "supporting": [
      "s05-078_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}