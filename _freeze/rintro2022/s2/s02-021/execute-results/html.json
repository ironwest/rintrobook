{
  "hash": "f06d0986443f83a0b6419c1a8fdaddac",
  "result": {
    "markdown": "---\ntitle: データフレーム(データフレームを作成しよう)(L26)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\nそれでは、データフレームを作成していきましょう！\n\nと、その前に、注意点としては、\n\n1. ここでの作り方は、あくまで基本を理解するための方法です。\n2. 多くの場合は、次の章の「インポート」を行う事で、データフレームが勝手に出来上がるので、ここでご紹介するやり方は必要ありません\n3. 「めんどくさい」ですが、1回だけ、手を動かしてみて下さい。\n\nデータフレームを作成するためには、data.frame関数を利用します。\nこの関数、使い方は難しくなくて、\n\n`data.frame(<列名>=<ベクトル>, <列名>=<ベクトル>, ... )`\n  \nという書き方をすればOKです。実際にやっていましょう。\n\nnumberという列名と、nameという列名に、それぞれ次のようにc()でベクトルを作成して入れてあげると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(number = c(1,2,3,4),name = c(\"Aさん\",\"Bさん\",\"Cさん\",\"Dさん\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  number  name\n1      1 Aさん\n2      2 Bさん\n3      3 Cさん\n4      4 Dさん\n```\n:::\n:::\n\n\n\nなんとなく、表っぽい結果が返ってきました！\nここで、書き方ですが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(number = c(1,2,3,4),\n           name = c(\"Aさん\",\"Bさん\",\"Cさん\",\"Dさん\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  number  name\n1      1 Aさん\n2      2 Bさん\n3      3 Cさん\n4      4 Dさん\n```\n:::\n\n```{.r .cell-code}\ndata.frame(\n  number = c(1,2,3,4),\n  name = c(\"Aさん\",\"Bさん\",\"Cさん\",\"Dさん\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  number  name\n1      1 Aさん\n2      2 Bさん\n3      3 Cさん\n4      4 Dさん\n```\n:::\n:::\n\n\n\nこんな感じで、カンマの前後であれば改行しても大丈夫です。\n他にも、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_num <- c(1,2,3,4)\nvec_name <- c(\"A\",\"B\",\"C\",\"D\")\n\ndata.frame(number = vec_num, name = vec_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  number name\n1      1    A\n2      2    B\n3      3    C\n4      4    D\n```\n:::\n:::\n\n\n\nという風に、ベクトルを他の変数に入れてあげて作成することもできます。\n\n書き方が行く通りにもあって最初は混乱するかもしれませんが、うまく改行や複雑な部分を変数にいれることができれば、すっきりと読みやすいコードになりますので、慣れてきたら、読みやすいコードを意識して書いてみてもよいかもしれません。\n\n\nところで、表の要素の長さが違うとどういうことがおこるでしょう？\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(number = c(1,2,3),\n           name = c(\"Aさん\",\"Bさん\",\"Cさん\",\"Dさん\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in data.frame(number = c(1, 2, 3), name = c(\"Aさん\", \"Bさん\", : arguments imply differing number of rows: 3, 4\n```\n:::\n:::\n\n\n\nエラーがでましたね。ベクトルの行数が違うと怒られました。\n\nこんな感じで、ベクトルの長さが同じでないとデータフレームは作成できないので、注意が必要です。\n\n\nただし、それぞれの行数が、最大の行数の整数倍になっているのであれば、（今回のケースであれば、nameが4行なので、numberが2行とか)であれば、エラーは起こらず、勝手に複製されます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(number = c(1,2),\n           name = c(\"Aさん\",\"Bさん\",\"Cさん\",\"Dさん\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  number  name\n1      1 Aさん\n2      2 Bさん\n3      1 Cさん\n4      2 Dさん\n```\n:::\n:::\n\n\n\n以上、データフレームの作成のやり方でした。\n次は、データフレームの操作方法を少しだけ紹介します。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}