{
  "hash": "f506a1f4e1c71b67ac8658ce6b4a1faf",
  "result": {
    "markdown": "---\ntitle: 全体集計の実践\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nそれでは解説していきます。まず、データを準備します\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid <- 1:15\nage <- c(30,40,65,34,86,43,64,26,87,45,76,24,97,45,34)\ngender <- c(\"m\",\"m\",\"f\",\"f\",\"f\",\"m\",\"m\",\"f\",\"f\",\"m\",\"f\",\"f\",\"m\",\"m\",\"m\")\nisx <- c(F,T,F,F,T,T,T,F,T,F,T,F,F,F,T)\n```\n:::\n\n\n\ntibble関数を利用してベクトルを一つのテーブルとしてまとめます\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyou <- tibble(id     = id, \n               age    = age, \n               gender = gender, \n               isx    = isx   ) %>% \n  \n  #サマライズを利用してデータを集計します\n  summarise(age_mean = mean(age),\n            gender_male_p  = sum(gender==\"m\")/n() ) \n\n\n\nhyou <- hyou %>% \n  mutate(\n    `年齢(平均)` = age_mean,\n    `性別:男性(%)`  = 100*gender_male_p\n  )\n\nhyou\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 4\n  age_mean gender_male_p `年齢(平均)` `性別:男性(%)`\n     <dbl>         <dbl>        <dbl>          <dbl>\n1     53.1         0.533         53.1           53.3\n```\n:::\n:::\n\n\n\nここでヨコ持ちのデータになっていますが、目的とする集計は終わっています。\n\nあとは、縦方向のデータに変換すればよいので、必要な列だけ残して、変換しましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyou <- hyou %>% \n  select(!c(age_mean, gender_male_p)) %>% \n  pivot_longer(everything(),\n               names_to = \" \",\n               values_to = \"全体\")\n\nhyou\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 2\n  ` `           全体\n  <chr>        <dbl>\n1 年齢(平均)    53.1\n2 性別:男性(%)  53.3\n```\n:::\n:::\n\n\n\n完成です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyou\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 2\n  ` `           全体\n  <chr>        <dbl>\n1 年齢(平均)    53.1\n2 性別:男性(%)  53.3\n```\n:::\n:::\n\n\n\nいかがでしょうか？\n\n今回は1ステップずつわけて関数の処理を実行しましたが実際は \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyou <- tibble(id  = id, \n               age = age, \n               gender = gender,\n               isx    = isx   ) %>% \n  \n  summarise(age_mean = mean(age),\n            gender_male_p  = 100*sum(gender==\"m\")/n() ) %>% \n  mutate(\n    `年齢(平均)` = age_mean,\n    `性別:男性(%)`  = gender_male_p\n  ) %>%\n  select(!c(age_mean, gender_male_p)) %>% \n  pivot_longer(everything(),\n               names_to = \" \",\n               values_to = \"全体\") \n  \n\nhyou\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 2\n  ` `           全体\n  <chr>        <dbl>\n1 年齢(平均)    53.1\n2 性別:男性(%)  53.3\n```\n:::\n:::\n\n\n\nこんな感じで処理を書くと目的の集計ができあがりました！\n\nいかでしょうか?\n\n処理の内容理解できましたか?\n\nここで上の内容を応用してもう少し複雑な集計をやってみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(id     = id, \n              age    = age, \n              gender = gender, \n              isx    = isx   )\n\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 x 4\n      id   age gender isx  \n   <int> <dbl> <chr>  <lgl>\n 1     1    30 m      FALSE\n 2     2    40 m      TRUE \n 3     3    65 f      FALSE\n 4     4    34 f      FALSE\n 5     5    86 f      TRUE \n 6     6    43 m      TRUE \n 7     7    64 m      TRUE \n 8     8    26 f      FALSE\n 9     9    87 f      TRUE \n10    10    45 m      FALSE\n11    11    76 f      TRUE \n12    12    24 f      FALSE\n13    13    97 m      FALSE\n14    14    45 m      FALSE\n15    15    34 m      TRUE \n```\n:::\n:::\n\n\n\nのデータを加工して、\n\n|                   |             |\n|:=================:|:===========:|\n|年齢:平均(最小-最大)| XX.XX(XX-XX)|\n|性別:男性 人数(%)   | XX(XX.X%)   |\n\nというような形に加工しましょう。\n\nもしご自身でできそうな場合は、とりくんでみてください。\n\n最小を求める関数は、min\n最大を求める関数は、max\n文字列を結合するには、stringr::str_c関数\n\nを利用します。\n\n",
    "supporting": [
      "s06-009_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}