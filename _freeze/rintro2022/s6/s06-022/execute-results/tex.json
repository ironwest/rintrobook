{
  "hash": "dabd72091f45f317776ea5fd6021400c",
  "result": {
    "markdown": "---\ntitle: 文字列を日付・時刻型へ(sld96)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\n```\n:::\n\n\n\nこの、 日付、時刻型への変換については、実はas_date関数はかなり優秀で、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_date(\"2000/04/30\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2000-04-30\"\n```\n:::\n\n```{.r .cell-code}\nas_date(\"20000430\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2000-04-30\"\n```\n:::\n\n```{.r .cell-code}\nas_date(\"2000年4月30日\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2000-04-30\"\n```\n:::\n:::\n\n\n\nと、日本語表記でも変換できてしまいます。\n\nただ、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_date(\"4月30日(2000年)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: All formats failed to parse. No formats found.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n\nこんな形であったり、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_date(\"04302000\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: All formats failed to parse. No formats found.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n\nこんな形であったりするものは変換できません(数字の順番が大切だったりします)\n\nこういう場合に活躍するのが、数字の並び順に年(year)月(month)、日(day)を指定できる\n\nymd mdy dmy 等の関数です。\n\n例えば、4月30日(2000年)のような表記は、月、日、年の順番で数字が並んでいるので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdy(\"4月30日(2000年)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2000-04-30\"\n```\n:::\n:::\n\n\n\nとすることでうまく変換できました。\n\n他に、もっと複雑な変換が必要な場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?parse_date_time\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n:::\n\n\n\nの例にあるように、日付と時刻が入り混じっているようなケースや\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"09-01-01\", \"090102\", \"09-01 03\", \"09-01-03 12:02\")\nas_datetime(x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 1 failed to parse.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2009-01-01 UTC\" \"2009-01-02 UTC\" \"2009-01-03 UTC\" NA              \n```\n:::\n\n```{.r .cell-code}\nparse_date_time(x, c(\"ymd\", \"ymd HM\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2009-01-01 00:00:00 UTC\" \"2009-01-02 00:00:00 UTC\"\n[3] \"2009-01-03 00:00:00 UTC\" \"2009-01-03 12:02:00 UTC\"\n```\n:::\n:::\n\n\n\n年月日の順番が途中でいれかわっているようなケース\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"2009-01-01\", \"02022010\", \"02-02-2010\")\nas_date(x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 2 failed to parse.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2009-01-01\" NA           NA          \n```\n:::\n\n```{.r .cell-code}\nparse_date_time(x, c(\"dmY\", \"ymd\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2009-01-01 UTC\" \"2010-02-02 UTC\" \"2010-02-02 UTC\"\n```\n:::\n:::\n\n\n\n何個か欠損しているケース\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"2011-12-31 12:59:59\", \n       \"2010-01-01 12:11\", \n       \"2010-01-01 12\",\n       \"2010-01-01\")\n\nas_datetime(x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 1 failed to parse.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2011-12-31 12:59:59 UTC\" \"2020-10-01 01:12:11 UTC\"\n[3] NA                        \"2010-01-01 00:00:00 UTC\"\n```\n:::\n\n```{.r .cell-code}\nparse_date_time(x, \"Ymd HMS\", truncated = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2011-12-31 12:59:59 UTC\" \"2010-01-01 12:11:00 UTC\"\n[3] \"2010-01-01 12:00:00 UTC\" \"2010-01-01 00:00:00 UTC\"\n```\n:::\n:::\n\n\n\ntruncatedで欠損して良い個数を指定するとNAにならずに変換できます。\n\n個人的にはこのparse_date_timeを駆使しないといけないデータが出現した場合は、まずはstr_系の関数を利用して、少しキレイにすることを考えますが、利用できそうな場合は利用できると良いかもしれません。\n\n次は数字から日付型をつくる方法を解説していきます。\n\n",
    "supporting": [
      "s06-022_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}