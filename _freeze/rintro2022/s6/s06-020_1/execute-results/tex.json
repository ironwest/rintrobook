{
  "hash": "5d502c2a7028f2196b4df8b84347c459",
  "result": {
    "markdown": "---\ntitle: 差の計算のRでの実践\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nそれでは、ここからは、lag、leadなどの関数の動作をRで見ていきましょう。\n\nまずは、スライドで紹介した関数のベクトルに対する動作を改めて確認しておきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1,2,3,4,5)\n\ndplyr::lag(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA  1  2  3  4\n```\n:::\n\n```{.r .cell-code}\ndplyr::lead(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  3  4  5 NA\n```\n:::\n\n```{.r .cell-code}\ndplyr::first(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ndplyr::last(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\ndplyr::nth(vec,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n\nこれらの関数の動作、イメージ通りでしょうか。lagが後ろにずらし、leadが前にずらしfirstが一番目の要素lastが最後の要素nthがn番目の要素を取り出すという関数になっています。\n\ntibbleの列に対しても実行してみましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(\n  a = c(1,2,3,4,5)\n)\n\ndat %>% \n  mutate(\n    a_lag=lag(a),\n    a_lead = lead(a),\n    a_first = first(a),\n    a_last = last(a),\n    a_third = nth(a,3)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 6\n      a a_lag a_lead a_first a_last a_third\n  <dbl> <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n1     1    NA      2       1      5       3\n2     2     1      3       1      5       3\n3     3     2      4       1      5       3\n4     4     3      5       1      5       3\n5     5     4     NA       1      5       3\n```\n:::\n:::\n\n\n\nいかがでしょうか?\n\nスライドでの説明通りに動いていますね?\n\ngroup_byを入れてあげる場合も\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(\n  id = c(1 ,1 ,1 ,1 ,2 ,2 ,2 ,2 ,3 ,3 ,3 ,3),\n  v  = c(11,12,13,14,21,22,23,24,31,32,33,34) \n)\n\ndat %>% \n  mutate(\n    v_lag=lag(v),\n    v_lead = lead(v),\n    v_first = first(v),\n    v_last = last(v)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 6\n      id     v v_lag v_lead v_first v_last\n   <dbl> <dbl> <dbl>  <dbl>   <dbl>  <dbl>\n 1     1    11    NA     12      11     34\n 2     1    12    11     13      11     34\n 3     1    13    12     14      11     34\n 4     1    14    13     21      11     34\n 5     2    21    14     22      11     34\n 6     2    22    21     23      11     34\n 7     2    23    22     24      11     34\n 8     2    24    23     31      11     34\n 9     3    31    24     32      11     34\n10     3    32    31     33      11     34\n11     3    33    32     34      11     34\n12     3    34    33     NA      11     34\n```\n:::\n:::\n\n\n\nこんな感じの結果が、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>%\n  group_by(id) %>% \n  mutate(\n    v_lag=lag(v),\n    v_lead = lead(v),\n    v_first = first(v),\n    v_last = last(v)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 6\n# Groups:   id [3]\n      id     v v_lag v_lead v_first v_last\n   <dbl> <dbl> <dbl>  <dbl>   <dbl>  <dbl>\n 1     1    11    NA     12      11     14\n 2     1    12    11     13      11     14\n 3     1    13    12     14      11     14\n 4     1    14    13     NA      11     14\n 5     2    21    NA     22      21     24\n 6     2    22    21     23      21     24\n 7     2    23    22     24      21     24\n 8     2    24    23     NA      21     24\n 9     3    31    NA     32      31     34\n10     3    32    31     33      31     34\n11     3    33    32     34      31     34\n12     3    34    33     NA      31     34\n```\n:::\n:::\n\n\n\nmutateだとこうなって、\n\nsummariseだと、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>%\n  group_by(id) %>% \n  summarise(\n    v_first = first(v),\n    v_last = last(v),\n    v_second = nth(v,2)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 4\n     id v_first v_last v_second\n  <dbl>   <dbl>  <dbl>    <dbl>\n1     1      11     14       12\n2     2      21     24       22\n3     3      31     34       32\n```\n:::\n:::\n\n\n\nこうなりました。\n\nいかがでしょうか?\n\nここでご紹介した関数を利用すれば、縦方向に時系列で保存されているデータから、差や比等を抽出することできそうですね?\n\n次の動画では、これらの関数を利用した課題をお出しいたします。",
    "supporting": [
      "s06-020_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}