{
  "hash": "f39189bdd6bc7b76d3160f75db327556",
  "result": {
    "markdown": "---\ntitle: :時間の集計4 Rで実施3(sld126)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\n\nplot_id <- function(.data,tgt_id){\n  gdat <- .data %>% \n    filter(id %in% tgt_id) %>% \n    mutate(row_n = n():1) %>%\n    mutate(points = map2(start,end, ~{.x:.y})) %>% \n    select(id,med,row_n,points) %>% \n    unnest(c(points)) %>% \n    mutate(points = as_date(points))\n  \n  ggplot(gdat) +\n    geom_point(aes(x = points, y = as.factor(row_n), color = med)) +\n    scale_y_discrete(labels=NULL) +\n    facet_wrap(~id, scales = \"free\")\n}\n\ncompare_plot <- function(.data1, .data2, tgt_id){\n  pre_graph  <- plot_id(.data1, tgt_id)\n  post_graph <- plot_id(.data2, tgt_id)\n  \n  cowplot::plot_grid(pre_graph, post_graph, nrow=2)\n}\n\ndat <- read_csv(\"data/time.csv\")\n\ndat_fin <- dat %>% \n  arrange(id,med,start) %>% #ここにmed,startを追加  \n  mutate(interv = interval(start, end)) %>%  #同じ\n  group_by(id, med) %>%  #idとmedでグループ化\n  mutate(\n    prev_overlap   = int_overlaps(interv, lag(interv)),\n    prev_edgealign = int_aligns(interv, lag(interv)),\n  ) %>% \n  mutate(prev_oa = prev_overlap | prev_edgealign)  %>% \n  replace_na(list(prev_oa = FALSE)) %>% \n  mutate(presc_id = cumsum(!prev_oa))  %>%\n  group_by(id, med, presc_id) %>% #グループを作り直し。id,medを追加\n  summarise(start = min(start), end = max(end)) %>% \n  ungroup() %>%\n  arrange(id,med,start) #並び替えておきます。\n```\n:::\n\n\n\nそれでは、93番のデータが想定とちがった理由を確認しておきます\n\nこれは、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_plot(dat,dat_fin,93)\n```\n\n::: {.cell-output-display}\n![](s06-034_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n                             prev_overlap   cumsum(!prev_oa)\n |-------------------|            FALSE         1\n   |-----|                        TRUE          1\n               |--------------|   FALSE         2\n\nこのようなパターンとなっているため、処理をした結果が、\n\n\n |-------------------|            \n               |--------------|\n\nこうなっていて、処理自体は正しく終わっているのですが、うまくくっついていないケースです。\n\nこれへの対応は色々と考えられますが、ここでは、処理を複数回繰り返して対応しましょう。上の形に対して同じ処理を繰り返すと、最終的には\n\n |----------------------------|            \n\nこうなるはずです。\n\n「処理」を行数の変化がなくなるまで複数回実行してあげて全部の行を一つにまとめましょう。\n \nできますか？\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_n1 <- dat %>% \n  arrange(id,med,start) %>% \n  mutate(interv = interval(start, end)) %>% \n  group_by(id, med) %>% \n  mutate(\n    prev_overlap = int_overlaps(interv, lag(interv)),\n    prev_nextday = int_overlaps(interv, int_shift(lag(interv),days(1))),\n  ) %>%\n  mutate(prev_oa = prev_overlap | prev_nextday) %>% \n  replace_na(list(prev_oa = FALSE)) %>% \n  mutate(presc_id = cumsum(!prev_oa)) %>%\n  group_by(id, med, presc_id) %>% \n  summarise(start = min(start), end = max(end)) %>% \n  ungroup() %>% \n  select(id, med, start, end)  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'id', 'med'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n\n\nこれが１回目の処理です。\n\n行数の変化は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 400\n```\n:::\n\n```{.r .cell-code}\nnrow(dat_n1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 342\n```\n:::\n:::\n\n\n\nですね。\n\nもう一度。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_n2 <- dat_n1 %>% \n  arrange(id,med,start) %>% \n  mutate(interv = interval(start, end)) %>% \n  group_by(id, med) %>% \n  mutate(\n    prev_overlap = int_overlaps(interv, lag(interv)),\n    prev_nextday = int_overlaps(interv, int_shift(lag(interv),days(1))),\n  ) %>%\n  mutate(prev_oa = prev_overlap | prev_nextday) %>% \n  replace_na(list(prev_oa = FALSE)) %>% \n  mutate(presc_id = cumsum(!prev_oa)) %>%\n  group_by(id, med, presc_id) %>% \n  summarise(start = min(start), end = max(end)) %>% \n  ungroup() %>% \n  select(id, med, start, end)  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'id', 'med'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n\n\nすると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 400\n```\n:::\n\n```{.r .cell-code}\nnrow(dat_n1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 342\n```\n:::\n\n```{.r .cell-code}\nnrow(dat_n2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 341\n```\n:::\n:::\n\n\n\n1行減りました。ということはこれ以上変化しないはずですが、\n\n念のため、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_n3 <- dat_n2 %>% \n  arrange(id,med,start) %>% \n  mutate(interv = interval(start, end)) %>% \n  group_by(id, med) %>% \n  mutate(\n    prev_overlap = int_overlaps(interv, lag(interv)),\n    prev_nextday = int_overlaps(interv, int_shift(lag(interv),days(1))),\n  ) %>%\n  mutate(prev_oa = prev_overlap | prev_nextday) %>% \n  replace_na(list(prev_oa = FALSE)) %>% \n  mutate(presc_id = cumsum(!prev_oa)) %>%\n  group_by(id, med, presc_id) %>% \n  summarise(start = min(start), end = max(end)) %>% \n  ungroup() %>% \n  select(id, med, start, end)  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'id', 'med'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nnrow(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 400\n```\n:::\n\n```{.r .cell-code}\nnrow(dat_n1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 342\n```\n:::\n\n```{.r .cell-code}\nnrow(dat_n2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 341\n```\n:::\n\n```{.r .cell-code}\nnrow(dat_n3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 341\n```\n:::\n:::\n\n\n\nはい。確かに変化していないので問題なく結合できているはずです。\n\n93番を見てあげると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_plot(dat,dat_n1,93)\n```\n\n::: {.cell-output-display}\n![](s06-034_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\ncompare_plot(dat_n1,dat_n2,93)\n```\n\n::: {.cell-output-display}\n![](s06-034_files/figure-pdf/unnamed-chunk-8-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n確かに結合されていますね？\n\nこの処理方法、時間もかかるし面倒なので、本来であれば\n\n* 繰り返し処理\n* 関数化\n\nなどで対応しますが、少し抽象度が高い概念となるため、本コースでは以下に例示をするだけにとどめます。\n\nもっと勉強してみたいという方は、別のコースを確認ください。\n\n例示：\n\n関数を作成する\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprocess_data <- function(.data){\n  fin <- .data %>%\n    arrange(id,med,start) %>% \n    mutate(interv = interval(start, end)) %>% \n    group_by(id, med) %>% \n    mutate(\n      prev_overlap = int_overlaps(interv, lag(interv)),\n      prev_nextday = int_overlaps(interv, int_shift(lag(interv),days(1))),\n    ) %>%\n    mutate(prev_oa = prev_overlap | prev_nextday) %>% \n    replace_na(list(prev_oa = FALSE)) %>% \n    mutate(presc_id = cumsum(!prev_oa)) %>%\n    group_by(id, med, presc_id) %>% \n    summarise(start = min(start), end = max(end)) %>% \n    ungroup() %>% \n    select(id, med, start, end)\n  return(fin)\n}\n```\n:::\n\n\n\n繰り返し処理を行う\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niter_data <- dat\nprerows <- nrow(iter_data)\npostrows <- 0 \nwhile(postrows != prerows){\n  prerows <- nrow(iter_data)\n  print(prerows)\n  iter_data <- process_data(iter_data)\n  postrows <- nrow(iter_data)\n  print(postrows)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 400\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'id', 'med'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 342\n[1] 342\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'id', 'med'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 341\n[1] 341\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'id', 'med'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 341\n```\n:::\n:::\n\n\n\n処理終わり！\n\nということで関数とwhileなどの繰り返し処理を利用すると、すっきりと書くことができます。\n\n最後に、ここで処理したデータを利用して、最初に求めようとしていた、薬A、B、Cの投与期間の最小値、最大値、平均値をもとめてみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_n3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 341 x 4\n      id med   start      end       \n   <dbl> <chr> <date>     <date>    \n 1     1 A     2020-04-14 2020-05-07\n 2     1 B     2020-04-01 2020-04-09\n 3     2 A     2020-05-12 2020-06-30\n 4     3 A     2020-05-31 2020-08-01\n 5     4 B     2020-04-03 2020-06-04\n 6     5 A     2020-04-26 2020-07-09\n 7     5 B     2020-04-15 2020-05-10\n 8     6 A     2020-05-16 2020-06-14\n 9     6 B     2020-05-02 2020-05-07\n10     7 C     2020-05-28 2020-06-27\n# i 331 more rows\n```\n:::\n\n```{.r .cell-code}\ndat_n3 %>% \n  group_by(med) %>% \n  summarise(\n    min_kikan = min(end-start),\n    max_kikan = max(end-start),\n    avg_kikan = mean(end-start)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 4\n  med   min_kikan max_kikan avg_kikan    \n  <chr> <drtn>    <drtn>    <drtn>       \n1 A     3 days    135 days  54.87786 days\n2 B     1 days    126 days  58.81308 days\n3 C     1 days    130 days  48.01942 days\n```\n:::\n:::\n\n\n\nできました!\n\nいかがでしょうか?\n\nだいぶ複雑でしたが、少し工夫して計算することで日付の幅等の集計を行うことができました。\n\nお疲れさまでした。以上で集計に関する内容はおしまいです。\n\n補足として、intervalを利用しないで同様の処理を行う方法を次の動画で解説しておりますので、よろしければどうぞ。\n\n必要ないという方は次のセクションにお進みください\n\n",
    "supporting": [
      "s06-034_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}