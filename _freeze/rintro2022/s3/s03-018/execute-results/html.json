{
  "hash": "35583de05f1af8f5078a02349042431a",
  "result": {
    "markdown": "---\ntitle: Parseの落とし穴(L53)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n\n\nここでは、例として、import_practice2.txt(,で区切られているファイル。)を読み込んでいきます\n\n読み込んだデータは適当な変数名(dat)に放り込んでおきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\"import_practice2.txt\")\n```\n:::\n\n\n\n色々と警告のメッセージが出ていますが、ここでは無視して。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat\n```\n:::\n\n\n\nを実行すると最初の10行はこんな感じでした。\n\nまた、それぞれの列の型は、\n\ncol1_num: <dbl>\ncol2_char: <chr>\ncol3_NumChar: <dbl>\ncol4_CharNum: <chr>\n\nとなっています。\n\nうまく読み込めているように見えますが、ちょっとEnvironmentペーンの、datをクリックしてデータのビューワーを起動しましょう\n\n一番下までスクロールすると、col3_NumChar列に、NAという記載がでてきます。\n\nこのNA、インポート時に、うまくパースできなかった結果、生じているもので、読み込み時にでてきていた\n\n警告:  90 parsing failures.\n\nというのは、うまくデータが変換できずに欠損値が発生していますよという意味です。\n\nこの事象、なぜ発生するかというと、自動パースは、デフォルトでは最初の1000行を見て判断するという形になっています。\n\nこのファイルは、意図的に1010行目から3列目に文字列を、4列目に数字を入れてあります。\n\nなので、最初の1000行で3列目はすべて数字であったため、read_csv関数は、「3列目は数字として扱う」と決めたのに、1010行目から文字列が入ってしまい、境目で\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_number(c(1,2,3,4,5,\"a\",\"b\",\"c\"))\n```\n:::\n\n\n\nこのような処理が生じてしまい、結果、\n\n>[1]  1  2  3  4  5 NA NA NA\n\nとなったという状況です。\n\nこの事象を回避するためにはいくつかやり方があります\n\nその1：自動的に判断する行数を増やす:\n\nguess_maxというオプションで行を増やすことができます。\n\nデフォルト\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\"import_practice2.txt\", \n               guess_max = 1000)\n\ntail(DT) #tailは最後の列を表示する関数\n```\n:::\n\n\n\nと、普通に読み込んだらこうですが、\n\nguess_maxを増やす\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\"import_practice2.txt\",\n                 guess_max = 99999)\n\ntail(dat)  #col3がきちんと<chr>となり、NAではなくなっています。\n```\n:::\n\n\n\nこの方法のデメリット：事前に行数がわからない場合は値を何にすればよいかわからない。データによっては処理が重くなる\n\nその2:列毎に型を指定してあげる。\n\nデータを眺めてある程度どのようなデータが含まれているか分かっている場合は、推測しないで、パースする型を直接していするような方法もとれます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\"import_practice2.txt\",\n               col_types=\"iccc\")\n\ntail(dat)\n\n?read_csv\nvignette(\"readr\") #のAvailable column specification\n```\n:::\n\n\n\nに、設定できる型がたくさん記載されていますが、とりあえず、最初の段階ではi d cの3つくらいを抑えておいてください。\n\nデメリット:事前にどの列にどんなデータが入っているか知っている必要ありそれでも、事故的に文字列が数値と思っている列に紛れ込んでいるケースではNAとなってしまう。\n\nその3:全部文字列としてとりあえず読み込む\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\"import_practice2.txt\",\n               col_types=cols(.default=\"c\"))\n\ntail(dat)\n```\n:::\n\n\n\nデメリット:後々自分で型変換を必要に応じて行う必要がある\n\n個人的には、どんなデータが含まれているかわからないようなケースではその3の方法を多用して読み込みを行っています。\n\nもちろん、データがおかしなことになっていない可能性が高い、直接データベースから吐き出したファイル等を読み込む場合は、データベースにある型を指定して読み込んだりもしますが、\n\n列の型変換、Section5のデータ加工を利用すれば、非常に簡単にできるので、インポート時点でデータが欠損することを避けることを重視しておくのが最初のうちは無難かと思います。。\n\n\nお疲れさまでした。\n\n以上で、駆け足でしたが、最低限のテキストファイルの読み込みについての解説でした。\n\n次の動画からは、エクセルファイルの読み込みについて解説していきます\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}