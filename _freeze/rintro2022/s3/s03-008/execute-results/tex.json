{
  "hash": "aee2a1d3b21c6b0d4a032e4c6b81b2b1",
  "result": {
    "markdown": "---\ntitle: 課題:テキストファイルの読み込み(L43)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n\n\nそれではミニ課題です。このセクションからは所々に、コードを自分で書いてみる課題を出していきます。電車の中で見ていただいている等、すぐにRに触れない環境にいらっしゃる場合は、少なくとも、どのようにコードを書くかを思い浮かべる等をしておくと定着がはやくなると思いますので、やってみてください。Rは書けば書くほど上達します。\n\n尚、条件としては、何もパッケージが読み込まれていない状況を想定して回答を作ってみてください。\n\n課題1：”ichiji/tekitou.txt”を読み込んで好きな名前の変数の中に保存してみてください\n\n課題2：新しく、一時フォルダ内にsuuji.txtというファイルを作成し、その中に100という数字を書いてから読み込んで、変数に保存して、4倍の値を計算してみてください。\n\n動画をとめて実際にやってみるか、どうするか考えてみてください\n\n答えです\n課題1：”ichiji/tekitou.txt”を読み込んで好きな名前の変数の中に保存してみてください\n　　　　\nこれは、動画の内容そのままですね？\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhensu <- readr::read_file(\"ichiji/tekitou.txt\")\n\nlibrary(readr)\nhensu <- read_file(\"ichiji/tekitou.txt\")\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v purrr     1.0.1\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nfile_path <- \"ichiji/tekitou.txt\"\nhensu <- read_file(file_path)\n```\n:::\n\n\n\nこれら、全部正解です。\n\n課題2：新しく、一時フォルダ内にsuuji.txtというファイルを作成して、その中に100という数字を書いて、読み込んで、変数に保存して、4倍の値を計算してみてください。\n\nこれはちょっと今の時点では難しいかもしれません。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nsuuji <- read_file(\"ichiji/suuji.txt\")\nsuuji\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"100\"\n```\n:::\n:::\n\n\n\n単純に\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuuji * 4\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in suuji * 4: non-numeric argument to binary operator\n```\n:::\n:::\n\n\n\nとすると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(suuji) #で文字列型で読み込まれているため、計算できずにエラーになります。\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr \"100\"\n```\n:::\n\n```{.r .cell-code}\nas.numeric(suuji) * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 400\n```\n:::\n:::\n\n\n\nとしてあげるとOKです。\n\n課題、どうでしたか？as.numericは今後も、長い付き合いになる関数ですので、覚えておいてください。\n\nおつかれさまでした。以上でパス、ディレクトリの話はおしまいです。次からは、ファイルの読み込みについて考えていきます\n\n",
    "supporting": [
      "s03-008_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}