{
  "hash": "3d62951320c7e05213ddc55daf15a84b",
  "result": {
    "markdown": "---\ntitle: 実践 pivot_wider よくある警告\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nこの変換を行う場合のよくあるエラーを確認しておきましょう。\n\nよくある警告\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoko_error <- \n  tibble(\n    city = c(rep(\"札幌\",4)),\n    hiduke = c(\"2018-04-01\",\"2018-04-02\",\"2018-04-03\",\"2018-04-01\"),\n    tenki = c(\"晴れ\",\"雨\",\"雨\",\"雨\")\n)\n\nyoko_error\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  city  hiduke     tenki\n  <chr> <chr>      <chr>\n1 札幌  2018-04-01 晴れ \n2 札幌  2018-04-02 雨   \n3 札幌  2018-04-03 雨   \n4 札幌  2018-04-01 雨   \n```\n:::\n:::\n\n\n\n注目していただきたいのはcity列をid_colとした場合に、hidukeが重複して、2018-04-01が存在しているということです。このような場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- \n  yoko_error %>% \n  pivot_wider(id_cols=city,names_from=hiduke,values_from=tenki)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Values from `tenki` are not uniquely identified; output will contain list-cols.\n• Use `values_fn = list` to suppress this warning.\n• Use `values_fn = {summary_fun}` to summarise duplicates.\n• Use the following dplyr code to identify duplicates.\n  {data} %>%\n  dplyr::group_by(city, hiduke) %>%\n  dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>%\n  dplyr::filter(n > 1L)\n```\n:::\n\n```{.r .cell-code}\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  city  `2018-04-01` `2018-04-02` `2018-04-03`\n  <chr> <list>       <list>       <list>      \n1 札幌  <chr [2]>    <chr [1]>    <chr [1]>   \n```\n:::\n:::\n\n\n\nこれまで見たことのない表示になっていると思います。\n\nこれ、列の型を見てほしいのですが、listとなっております。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(dat)\n```\n:::\n\n\n\nでいると明白ですが、札幌の2018-4-1のデータ、もともとの縦持ちデータでは2か所あり、それぞれ晴れと雨で全く別別の値でした。\n\nなので、その場所に二つのデータを押し込めるために、列がこれまで扱っていたベクトルでなくてリストになってしまったという形です。(リストであれば、一か所にベクトルを入れられるので、同じ位置に二つ以上のデータを入れるようなことも可能ですね?)\n\nこのような事象が生じた場合は、そもそも、なんで重複するデータが発生しているのか次第で対策方法が変わってくるためここでは踏み込みませんが、\n\n 警告メッセージ: \n   Values are not uniquely identified; output will contain list-cols.\n * Use `values_fn = list` to suppress this warning.\n * Use `values_fn = length` to identify where the duplicates arise\n * Use `values_fn = {summary_fun}` to summarise duplicates \n\nにもあるように、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoko_error %>% \n  pivot_wider(\n    id_cols=city,\n    names_from=hiduke,\n    values_from=tenki,\n    values_fn = length\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  city  `2018-04-01` `2018-04-02` `2018-04-03`\n  <chr>        <int>        <int>        <int>\n1 札幌             2            1            1\n```\n:::\n:::\n\n\n\nとすることで、各「マス目」に、何個のデータが含まれるかを表示することもできます。また、データが数字データであった場合、例えば、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- tibble(\n  col1 = c(\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"A\"),\n  col2 = c(\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\"),\n  val = c(1,2,3,4,5,6,7)\n)\n\ntest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 3\n  col1  col2    val\n  <chr> <chr> <dbl>\n1 A     a         1\n2 A     b         2\n3 A     c         3\n4 B     a         4\n5 B     b         5\n6 B     c         6\n7 A     a         7\n```\n:::\n\n```{.r .cell-code}\ntest %>% \n  pivot_wider(\n    id_cols = col1,\n    names_from = col2, \n    values_from = val,\n    values_fn = sum\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  col1      a     b     c\n  <chr> <dbl> <dbl> <dbl>\n1 A         8     2     3\n2 B         4     5     6\n```\n:::\n:::\n\n\n\nAのaに該当する部分、縦持ちデータでは1と7があるのですが、values_fnにsum関数の括弧なしを与えてあげると、足し算をしてくれました。他にも平均を調べたければ、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest %>% \n  pivot_wider(\n    id_cols = col1,\n    names_from = col2, \n    values_from = val,\n    values_fn = mean\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  col1      a     b     c\n  <chr> <dbl> <dbl> <dbl>\n1 A         4     2     3\n2 B         4     5     6\n```\n:::\n:::\n\n\n\n等を利用してそのまま計算することも可能です。\n\nいかがでしょうか?\n\n結構便利に使えそうですね?\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}