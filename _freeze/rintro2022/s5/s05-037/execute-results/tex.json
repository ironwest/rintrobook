{
  "hash": "718bbe9820230c001ceb3548a83c643f",
  "result": {
    "markdown": "---\ntitle: 練習問題\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nお疲れ様です、とりあえず、ここまでで基本的な事項は解説が終わりました。\n\n智識の定着をはかるため、練習問題を解いておきましょう\n\nQ1 次の文章を正規表現で書き表してください。\n\n0から5までの数字3文字に続いて0から9までの数字3から5文字\n\ndogの3文字ではじまって、wanwanwanで終わる文字列。(dogとwanwanwanの間の文字はなんでもよくて、その長さは1文字以上10文字以下)\n\n310から329までの整数に該当する文字列\n\nQ2 次のベクトルの中に含まれる検査結果を抜き出してください\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(\"1HbA1c :4.9\", \"2HbA1c: 6.3\", \"3HbA1c : 3\", \"4HbA1c:5\")\n```\n:::\n\n\n\n * 4.9, 6.3, 3.2, 5.2という結果になる正規表現を考え下さい。\n\nQ3 次のデータにはすべて数字のはずですが、誤入力によりアルファベットが紛れ込んでいるデータがあります。それを発見してください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(\"100000\", \"|o000\", \"l820\", \"201q\", \"1234s\")\n```\n:::\n\n\n\nそれでは答えです。\n\nQ1 次の文章を正規表現で書き表してください。\n\n0から5までの数字3文字に続いて0から9までの数字3から5文字\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg_q11 <- \"[0-5]{3}[0-9]{3,5}\"\n\ntgt_q11 <- c(\"123999\",\"456999\",\"1239999\",\"12399999\",\"1239\")\n\nstr_view(tgt_q11, reg_q11)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] | <123999>\n[3] | <1239999>\n[4] | <12399999>\n```\n:::\n:::\n\n\n\ndogの3文字ではじまって、wanwanwanで終わる文字列。(dogとwanwanwanの間の文字はなんでもよくて、その長さは1文字以上10文字以下)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg_q12 <- \"dog.{1,10}wanwanwan$\"\ntgt_q12 <- c(\n  \"dog123456789awanwanwan\",\n  \"dog123456wanwanwan\",\n  \"dogwanwanwanwanwan\",\n  \"dogwanwanwan\",\n  \"dog123456789abwanwanwan\",\n  \"dog1234wanwan\"\n)\n\nstr_view(tgt_q12, reg_q12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] | <dog123456789awanwanwan>\n[2] | <dog123456wanwanwan>\n[3] | <dogwanwanwanwanwan>\n```\n:::\n:::\n\n\n\n310から329までの整数に該当する文字列\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg_q13 <- \"3[1-2][0-9]\"\ntgt_q13_1 <- as.character(300:320)\ntgt_q13_2 <- as.character(321:340)\n\nstr_view(tgt_q13_1,reg_q13)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[11] | <310>\n[12] | <311>\n[13] | <312>\n[14] | <313>\n[15] | <314>\n[16] | <315>\n[17] | <316>\n[18] | <317>\n[19] | <318>\n[20] | <319>\n[21] | <320>\n```\n:::\n\n```{.r .cell-code}\nstr_view(tgt_q13_2,reg_q13)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] | <321>\n[2] | <322>\n[3] | <323>\n[4] | <324>\n[5] | <325>\n[6] | <326>\n[7] | <327>\n[8] | <328>\n[9] | <329>\n```\n:::\n:::\n\n\n\nできましたか?\n\nQ2 次のベクトルの中に含まれる検査結果を抜き出してください\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(\"1HbA1c :4.9\", \"2HbA1c: 6.3\", \"3HbA1c : 3\", \"4HbA1c:5\")\n```\n:::\n\n\n\n出題しておいて難ですが、これは結構ややこしいです。まずは、コロンの右側にある数字を指定してあげないと、コロンの左側の数字が引っかかってきます。\n\nなので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"(?<=:)\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"(?<=:)\"\n```\n:::\n:::\n\n\n\nです。ここで、小数と整数両方ひっかける正規表現をそのまま書くと、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"(?<=)\\\\d+\\\\.\\\\d+|\\\\d+\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"(?<=)\\\\d+\\\\.\\\\d+|\\\\d+\"\n```\n:::\n\n```{.r .cell-code}\nstr_view(vec,\"(?<=)\\\\d+\\\\.\\\\d+|\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] | <1>HbA<1>c :<4.9>\n[2] | <2>HbA<1>c: <6.3>\n[3] | <3>HbA<1>c : <3>\n[4] | <4>HbA<1>c:<5>\n```\n:::\n:::\n\n\n\nうまくいきません。なぜかというと、\n\n(?<=)\\\\d+\\\\.\\\\d+|\\\\d+\"\n(?<=)\\\\d+\\\\.\\\\d+|\\\\d+\"\n|---------------|---|\n\nという風に、コロンの後ろの小数　あるいは　整数という正規表現になっているからです。\n\nこれをただすためには、\n\n(?<=)(\\\\d+\\\\.\\\\d+|\\\\d+)\"\n     |-----------|----|\n|---------------------|\n \nという具合で、コロンの後ろを表す正規表現の後ろに()をつけて、小数か整数を指定してあげないといけません\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"(?<=:)((\\\\d+\\\\.\\\\d+)|\\\\d+)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] | 1HbA1c :<4.9>\n[4] | 4HbA1c:<5>\n```\n:::\n:::\n\n\n\nただ、これだけでも実は不十分で、コロンの後ろにスペースがある場合は正規表現がうまく働きません。ややこしいので、全パターン書き出してみましょう。ここでスペースは\\sで表現できるので\\sを書いています。\n\n1 (?<=:)   \\\\d+\\\\.\\\\d+\n2 (?<=:\\\\s)\\\\d+\\\\.\\\\d+\n3 (?<=:\\\\s)\\\\d+\n4 (?<=:)   \\\\d+\n\nパターンを組み合わせると\n1&4 (?<=:)(\\\\d+\\\\.\\\\d+|\\\\d+)\n2&3 (?<=:\\\\s)(\\\\d+\\\\.\\\\d+|\\\\d+)\n\nこうなります。\n\nLook Aroundの部分は、\n\n(?<=:(\\\\s|))\n    -(---|\n    -(   |)\n\nと、コロンに続いてスペース　あるいは　コロンに続いて何もなしと記載できるので、それに、小数あるいは整数を組み合わせると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"(?<=:(\\\\s|))(\\\\d+\\\\.\\\\d+|\\\\d+)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] | 1HbA1c :<4.9>\n[2] | 2HbA1c: <6.3>\n[3] | 3HbA1c : <3>\n[4] | 4HbA1c:<5>\n```\n:::\n:::\n\n\n\nとなります。\n\nこういう出力、結構汚いデータではよくあるので、正規表現で抽出できるとよいかもしれません。\n\nただし、実は\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(test = vec) %>% \n  separate(test,into=c(\"kensa\",\"value\"), sep=\":\") %>% \n  mutate(value2 = str_trim(value,\"both\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  kensa     value  value2\n  <chr>     <chr>  <chr> \n1 \"1HbA1c \" \"4.9\"  4.9   \n2 \"2HbA1c\"  \" 6.3\" 6.3   \n3 \"3HbA1c \" \" 3\"   3     \n4 \"4HbA1c\"  \"5\"    5     \n```\n:::\n:::\n\n\n\n後の方でお伝えする関数を併用すればすごく簡単に正規表現で頭を悩ませる必要なく処理できたりするので、正規表現ごりごりいける人以外はtidyverseで用意されている関数群を利用することを推奨いたします。\n\nQ3 次のデータにはすべて数字のはずですが、誤入力によりアルファベットが紛れ込んでいるデータがあります。それを発見してください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(\"100000\", \"|o000\", \"l820\", \"201q\", \"1234s\")\n```\n:::\n\n\n\nこれは色々とやり方ありますが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\D+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2] | <|o>000\n[3] | <l>820\n[4] | 201<q>\n[5] | 1234<s>\n```\n:::\n:::\n\n\n\nで数字以外を見つけるようなやり方が手っ取り早いかもしれません\n\n以上、正規表現の解説と練習問題でした。\n\nslide69にある内容、もう一度見返してみましょう。最初に暗号の様に見えていたと思いますが、今だったらそれほど難しい正規表現ではないとご理解いただけますね?\n\nおつかれさまでした。\n\n本コースの難所の一つである正規表現の説明はこれでおしまいです。\n\n次からはこの正規表現を活用してデータをキレイにする作業方法について解説していきます。\n\n",
    "supporting": [
      "s05-037_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}