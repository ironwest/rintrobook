{
  "hash": "94f6f75472b21c29b20f0de01b69b9b6",
  "result": {
    "markdown": "---\ntitle: 実践3 小数の抜き出し\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nここまでの知識で、「小数」のみ抜き出すということが実現できます。\n\n\\\\dだけだと、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(\"123.456\", \"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] | <123>.<456>\n```\n:::\n:::\n\n\n\n小数点が数字でないので、うまく拾うことができません。\n\nこれをうまく拾うためには、\n\n|        |        |         |\n|:======:|:======:|:=======:|\n|123     |.       | 456　　 |\n|\\\\d+    |\\\\.     | \\\\d+    |\n|数字の塊|ピリオド| 数字の塊|\n\nという形で、 \\\\d+\\\\.\\\\d+ という正規表現を用いてあげることが必要となります。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d+\\\\.\\\\d\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n\n\n\nいかがでしょうか？\n\nvecベクトルの中の、「小数」を塊としてキチンと拾えていますね?\n\nただ、これだと少数点がついていないケースはだめですね。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n\n\n\nと\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d+\\\\.\\\\d\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n\n\n\n「小数を含む数字」を正規表現で表すにはどうすればよいでしょうか?\n\nこの場合は、いずれかを表す、「A|B」を使います。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- c(\"a\",\"b\",\"c\",\"d\")\nstr_view(test,\"b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2] | <b>\n```\n:::\n\n```{.r .cell-code}\nstr_view(test,\"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3] | <c>\n```\n:::\n\n```{.r .cell-code}\nstr_view(test,\"b|c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2] | <b>\n[3] | <c>\n```\n:::\n:::\n\n\n\nいかがでしょうか?「|」記号を使うことで「いずれか」という条件でひっかけることができています。\n\nまた、()でくくることでパターンの順番を考慮することも可能です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- c(\"abb\",\"abc\",\"acb\",\"acc\")\n\nstr_view(test,\"(b|c)(b|c)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] | a<bb>\n[2] | a<bc>\n[3] | a<cb>\n[4] | a<cc>\n```\n:::\n:::\n\n\n\nとすることで、\n\n* 一文字目にbかc、\n* 二文字目にbかc\n\nという指定ができて、bc、cb、bb、cc全部をひっかけることができました。\n\nこの()と|を利用して「小数を含む数字」をひっかけてみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d+\\\\.\\\\d+|\\\\d+\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n\n\n\n\\\\d+\\\\.\\\\d+   |      \\\\d+\n小数　　　あるいは 　数字\nという指定ですね。\n\n注意!:ここで、数字　あるいは　小数　としてしますと、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d+|\\\\d+\\\\.\\\\d+\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n\n\n\nこのように、必ず小数のまえに数字が引っかかるので、小数が絶対に拾えなくなります。|を付けるときは、「複雑|単純」という順番にすることを留意しましょう。\n\n正規表現が複雑になってくると、読みやすくするために、つい、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d+ \\\\. \\\\d+ | \\\\d+\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n\n\n\nと、スペース等を入れたくなりますが、気をつけましょう。「 」スペースも文字なので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\" \")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n\n\n\n数字の塊　スペース　ピリオド　スペース　数字の塊というような意味合いの正規表現になってしまいます。\n\nその場合はある程度であれば()でくくってあげると\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d+\\\\.\\\\d+|\\\\d+\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n\n```{.r .cell-code}\nstr_view(vec,\"(\\\\d+\\\\.\\\\d+)|(\\\\d+)\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n\n\n\n見やすくなります。\n\nカッコは、囲むものに注意が必要です。\n\n複雑な正規表現になってきた場合は、r\"\"での正規表現が見やすくするためには良いかもしれません。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec, r\"(\\d+\\.\\d+|\\d+)\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n\n\n\n順番についてもう一言、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"a(b|c)\") #だと、ab と　acが該当しますが\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n\n```{.r .cell-code}\nstr_view(vec,\"(ab)|(c)\") #だた、 ab か　cが該当しますね?\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'vec' not found\n```\n:::\n:::\n",
    "supporting": [
      "s05-035_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}