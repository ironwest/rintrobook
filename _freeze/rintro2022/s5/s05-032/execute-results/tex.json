{
  "hash": "b9e7d9fc51a5b805f1b9357a6ac494f3",
  "result": {
    "markdown": "---\ntitle: 実践1 数字の指定\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nそれでは、正規表現を実際に利用していってみましょう。この正規表現、多分、このコースでもかなりとっつきにくい部類に入りますのですんなり理解できなくても問題ありませんわからないところがあれば、私の解説方法が悪いので、是非Q&Aで質問してください。\n\nそれでは、はじめていきましょう。\n\n正規表現とは文字列をパターンでひっかける手法です。\n\n正規表現を完全にマスターすることは、本コースの目的ではありません。「汚いデータ」でよくある問題を解決するための最低限をお伝えすることを目的としています。\n\nまた、正規表現を利用しないで解決できる問題は可能な限りそっちを利用することが良いかもしれません。\n\nまずvecという文字列ベクトルを作成します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(\"1\",\"120\",\"34.3\",\"ab123\", \n         \"5b\",\"6 5\",\"7\",\"b\",\"ac4235432\",\n         \"45.3mg/dl\",\"abc500ml 3unit 3:40AM\",\n         \"^ is start.\",\n         \"this sign($) represents end.\", \"....\")\n\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"1\"                            \"120\"                         \n [3] \"34.3\"                         \"ab123\"                       \n [5] \"5b\"                           \"6 5\"                         \n [7] \"7\"                            \"b\"                           \n [9] \"ac4235432\"                    \"45.3mg/dl\"                   \n[11] \"abc500ml 3unit 3:40AM\"        \"^ is start.\"                 \n[13] \"this sign($) represents end.\" \"....\"                        \n```\n:::\n:::\n\n\n\nこのvecの中に\"1\"という文字が含まれているかどうかを調べたければ、str_view()を使います。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] | <1>\n[2] | <1>20\n[4] | ab<1>23\n```\n:::\n:::\n\n\n\nこのようにstr_viewは、ベクトルの中に指定した文字が含まれているかどうかを調べて見ることができる関数です。\n\n\nstr_viewは、str_view(<ベクトル,<正規表現>)という形で指定する関数となっており、\"1\"も立派な正規表現です。\n\nこれだけだと正規表現のメリットである文字列を塊として扱うという実感がわきにくいと思いますので、複数の文字列をひっかけてみましょう。\n\n複数の文字列は、四角括弧の中に羅列することで表すことができて、\"[1234]\"のように書きます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"[1234]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] | <1>\n [2] | <1><2>0\n [3] | <3><4>.<3>\n [4] | ab<1><2><3>\n [9] | ac<4><2><3>5<4><3><2>\n[10] | <4>5.<3>mg/dl\n[11] | abc500ml <3>unit <3>:<4>0AM\n```\n:::\n:::\n\n\n\nはい。このように、\"1\"か\"2\"か\"3\"か\"4\"かいずれかの文字を含む要素をひっかけることができています。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"[1234]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] | <1>\n [2] | <1><2>0\n [3] | <3><4>.<3>\n [4] | ab<1><2><3>\n [9] | ac<4><2><3>5<4><3><2>\n[10] | <4>5.<3>mg/dl\n[11] | abc500ml <3>unit <3>:<4>0AM\n```\n:::\n\n```{.r .cell-code}\nstr_view(vec,\"[0123456789]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] | <1>\n [2] | <1><2><0>\n [3] | <3><4>.<3>\n [4] | ab<1><2><3>\n [5] | <5>b\n [6] | <6> <5>\n [7] | <7>\n [9] | ac<4><2><3><5><4><3><2>\n[10] | <4><5>.<3>mg/dl\n[11] | abc<5><0><0>ml <3>unit <3>:<4><0>AM\n```\n:::\n:::\n\n\n\n尚、数字は特別な書き方があって、[0123456789] は\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"[0-9]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] | <1>\n [2] | <1><2><0>\n [3] | <3><4>.<3>\n [4] | ab<1><2><3>\n [5] | <5>b\n [6] | <6> <5>\n [7] | <7>\n [9] | ac<4><2><3><5><4><3><2>\n[10] | <4><5>.<3>mg/dl\n[11] | abc<5><0><0>ml <3>unit <3>:<4><0>AM\n```\n:::\n\n```{.r .cell-code}\nstr_view(vec, \"\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] | <1>\n [2] | <1><2><0>\n [3] | <3><4>.<3>\n [4] | ab<1><2><3>\n [5] | <5>b\n [6] | <6> <5>\n [7] | <7>\n [9] | ac<4><2><3><5><4><3><2>\n[10] | <4><5>.<3>mg/dl\n[11] | abc<5><0><0>ml <3>unit <3>:<4><0>AM\n```\n:::\n\n```{.r .cell-code}\nstr_view(vec, \"[:digit:]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] | <1>\n [2] | <1><2><0>\n [3] | <3><4>.<3>\n [4] | ab<1><2><3>\n [5] | <5>b\n [6] | <6> <5>\n [7] | <7>\n [9] | ac<4><2><3><5><4><3><2>\n[10] | <4><5>.<3>mg/dl\n[11] | abc<5><0><0>ml <3>unit <3>:<4><0>AM\n```\n:::\n:::\n\n\n\n等でもOKです。\n\nここまではすべて1文字引っかかるかを見ていますが、二文字引っかかったかを見るためには、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"[0-9][0-9]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [2] | <12>0\n [3] | <34>.3\n [4] | ab<12>3\n [9] | ac<42><35><43>2\n[10] | <45>.3mg/dl\n[11] | abc<50>0ml 3unit 3:<40>AM\n```\n:::\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [2] | <12>0\n [3] | <34>.3\n [4] | ab<12>3\n [9] | ac<42><35><43>2\n[10] | <45>.3mg/dl\n[11] | abc<50>0ml 3unit 3:<40>AM\n```\n:::\n:::\n\n\n\nのようにしてあげることで、一番最初の1単独はひっかからなくなっています。\n\n「数字が連続する回数」での指定も可能で、{n,m}としてあげることで、n回以上、m回以下の連続する回数という指定ができます\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"[0-9]{2,4}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [2] | <120>\n [3] | <34>.3\n [4] | ab<123>\n [9] | ac<4235><432>\n[10] | <45>.3mg/dl\n[11] | abc<500>ml 3unit 3:<40>AM\n```\n:::\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d{2,4}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [2] | <120>\n [3] | <34>.3\n [4] | ab<123>\n [9] | ac<4235><432>\n[10] | <45>.3mg/dl\n[11] | abc<500>ml 3unit 3:<40>AM\n```\n:::\n:::\n\n\n\n1回以上の数字が連続した場合を調べるには\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(vec,\"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] | <1>\n [2] | <120>\n [3] | <34>.<3>\n [4] | ab<123>\n [5] | <5>b\n [6] | <6> <5>\n [7] | <7>\n [9] | ac<4235432>\n[10] | <45>.<3>mg/dl\n[11] | abc<500>ml <3>unit <3>:<40>AM\n```\n:::\n:::\n\n\n\nです。\n\n",
    "supporting": [
      "s05-032_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}