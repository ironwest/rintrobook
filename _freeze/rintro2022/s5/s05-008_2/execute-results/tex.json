{
  "hash": "f925e7ba36d56236e3f00ab4d1e74970",
  "result": {
    "markdown": "---\ntitle:  パイプ関数の説明\npage-layout: full\ntitle-block-banner: true\ncomments: false\nfilters:\n  - lightbox\nlightbox:\n  match: auto\n---\n\n\n\n::: {layout-ncol=3}\n![](slides/s5b/slides010.jpg){group=\"slides\"}\n\n![](slides/s5b/slides011.jpg){group=\"slides\"}\n:::\n\nひとつ前の動画で作成した、tasizan関数を少し振り返りましょう。\n\nこの関数、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntasizan <- function(num1,num2){\n  return(num1 + num2)\n}\n\ntasizan(3,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n:::\n\n\n\nで、3+4を実行していました。逆に考えると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 4 #はtasizan(3,4)と同じ意味になります。\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n:::\n\n\n\n実際に、関数を()抜きで描くとその関数の処理をみることができます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntasizan\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction(num1,num2){\n  return(num1 + num2)\n}\n```\n:::\n:::\n\n\n\nこれは、1つ前の動画で作成した関数なので、皆さんがタイプしたものと一緒ですね。実は+,-,*等の、記号も「関数」です。\n\n``(バッククオート)でくくってあげると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`+`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (e1, e2)  .Primitive(\"+\")\n```\n:::\n\n```{.r .cell-code}\n`-`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (e1, e2)  .Primitive(\"-\")\n```\n:::\n\n```{.r .cell-code}\n`*`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (e1, e2)  .Primitive(\"*\")\n```\n:::\n\n```{.r .cell-code}\n`/`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (e1, e2)  .Primitive(\"/\")\n```\n:::\n:::\n\n\n\nと何らかの関数であることがわかります。`-`関数について、その動きをみてみると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4 - 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n\nと書くことで、-記号の前の数字から後の数字を引くというような動作をしていることがわかります。\n\nこのように、皆さんはすでに「記号」がその前後の値を自動的に関数に取り込んで処理するというものに出会っています。\n\nそれで、本題なのですが、ctrl+shift+mをwindowsの方は押してみてください。\n\n(macの方は + shift + m)\n\n %>% <- こんな記号がでてきましたか?（もし、ここで |> という記号がでてきた場合は、本コース作成中にRに組み込まれた新しいパイプ記号です。%>%とほぼ同じように使えますが、一部仕様が違う部分もありますので、native pipeについての補足動画で補完してください）\n \nこれが、パイプ関数とよばれる関数です。\n \nこのパイプ関数の動作のイメージを確認しましょう:\n\n\n::: {layout-ncol=3}\n![](slides/s5b/slides012.jpg)\n:::\n \nでは実際にみていきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhikizan <- function(num1,num2){\n  return(num1 - num2)\n}\n\nkakezan <- function(num1, num2){\n  return(num1 * num2)\n}\n\nhikizan(10,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n\nで考えると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 %>% hikizan(. , 5) # hikizan(10,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n5  %>% hikizan(10, .) # hikizan(10,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n\nこの二つは全く同じ処理です。パイプ関数がパイプの前の値をパイプの後ろの関数に「.」で指定した場所にわたされて処理が実施されていますね?\n\nこんな風にパイプが1個だと、何がやりたいか分かりにくいと思いますが、関数の実行結果を次々とパイプに渡していくｔなにが起こるかを見てみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n100 %>% \n  hikizan(., 7) %>% \n  hikizan(., 7) %>% \n  tasizan(., 20) %>% \n  kakezan(., 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.6\n```\n:::\n:::\n\n\n\nこの計算結果、10.6になりましたが、これは、\n\n100から\n　7を引いて、その結果から\n　7を引いて、その結果に\n　20を足して、その結果に\n　0.1をかける。\n処理となります。\n\nこの処理、すごく単純に見えますが、関数のみを使ってかこうとすると、結構ややこしいです。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkakezan(tasizan(hikizan(hikizan(100,7),7),20),0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.6\n```\n:::\n:::\n\n\n\nどうでしょうか?\n\n関数が処理結果を()の中にいれないといけない関係上、一番内側にある関数から処理がおこなわれてさらに、()が多量にお互いの内側にある（「ネストしている」）ので、ぱっと見ただけでは処理を把握するのが厄介です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n100 %>% \n  hikizan(., 7) %>% \n  hikizan(., 7) %>% \n  tasizan(., 20) %>% \n  kakezan(., 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.6\n```\n:::\n\n```{.r .cell-code}\nkakezan(\n  tasizan(\n    hikizan(\n      hikizan(\n        100,7),\n      7),\n    20),\n  0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.6\n```\n:::\n:::\n\n\n\n改めて、パイプ関数で処理を書く方が\n\n* 処理の順番に記載ができる\n* ()がネストしない\n\nため、見通しがよいですね?\n\nこのパイプ関数、次からご説明する関数群を利用して\n\n <表データ> %>% \n   <表に新しい列を足す> %>% \n   <表の列Aが100以上の場合に絞り込む> %>% \n   <表の欠損しているデータを別の数値に変換する>\n \nなどのように、データクリーニングのプロセスを分かりやすく表示できるメリットがあるので今後、本セクションで多用します。\n \nそれでは、次の動画でパイプ関数の入力の練習をしておきましょう。\n\n",
    "supporting": [
      "s05-008_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}