{
  "hash": "b54f73e4830b3676426042d6d27fd09f",
  "result": {
    "markdown": "---\ntitle: rename()の実践\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nhyou <- tibble(\n  col1=c(1,2,3,4), \n  col2=c(10,20,30,40)\n)\n```\n:::\n\n\n\nそれでは、実際にrename関数を利用してみましょう使い方は、\n\n<表> %>% \n  rename(<新しい名前> = <対象となる列の名前>)\n\nでしたね?  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyou\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n   col1  col2\n  <dbl> <dbl>\n1     1    10\n2     2    20\n3     3    30\n4     4    40\n```\n:::\n\n```{.r .cell-code}\nhyou <- hyou %>% \n  rename(new = col2)\nhyou\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n   col1   new\n  <dbl> <dbl>\n1     1    10\n2     2    20\n3     3    30\n4     4    40\n```\n:::\n:::\n\n\n\nはい。このように、列名が変わっています。\n\nまた、日本語でデータを扱う場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyou2 <- tibble(`日本語の列名` = 1:3)\nhyou2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n  日本語の列名\n         <int>\n1            1\n2            2\n3            3\n```\n:::\n\n```{.r .cell-code}\nhyou2 %>% \n  rename(change = 日本語の列名)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n  change\n   <int>\n1      1\n2      2\n3      3\n```\n:::\n:::\n\n\n\nとそのまま書いても問題ありませんが、お勧めなのは、``バッククオートで囲んでおくという方法です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhyou2 %>% \n  rename(change = `日本語の列名`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n  change\n   <int>\n1      1\n2      2\n3      3\n```\n:::\n:::\n\n\n\n日本語の列名、半角の文字などが混ざっているとうまく処理されないことがあるので、このようなバッククオートをつけるように意識付けしておくことで無用なエラーを回避できますのでおすすめです。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}