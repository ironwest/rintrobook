{
  "hash": "8573cafbf71b125650919f3c9992a28b",
  "result": {
    "markdown": "---\ntitle: Rmarkdownでレポートを作成してみる―状況設定\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\nここからは本コースの締めくくりとして、単純集計とグラフを利用したレポートの作成を通して、Rを実際に利用する場面を想定した課題をやっていきましょう。\n \n「課題」としていますが、ここまで解説していない概念や関数もたくさん登場します。\n\n\nそのため、自分でとくのではなく、その状況に自分がおかれたらと想像しつつ動画と一緒に内容を追っていただいて、解き方の解説を見たうえで、次のRの勉強の指針としていただくことを想定した問題となっています。\n \nだいぶ高度なことをしているように見えるかもしれませんが、少しだけ勉強していただければ、Rが統計解析だけでなく、色々な場面で便利に利用できるプログラミング言語であることを理解いただけると思います。\n\nそれでは、はじめていきましょう。\n \n状況設定\n 　\nあなたは、ある会社に務めている産業看護職です。体重と血圧をターゲットにした健康施策を会社で実行するにあたり、どの職場を重点的に対策をしたらよいかを調べたいと思っています。\n 　\n血圧と体重を含む5年間のデータを利用して、\n\n* 会社全体のレポート\n* 職場別のレポート\n* 個人別のレポート\n\nを作成するようなことをやりたいと思っています。\n 　\n課題1:\n\nkadai/dataフォルダに含まれる、data.csvファイルにはある会社の健康診断の（架空の）データが含まれています。この架空データ、列が６個あり、\n 　\n* wpid: 職場ID\n* id  :個人のID\n* yr  :健康診断の年度\n* bmi :BMI\n* sbp :収縮期血圧\n* dbp :拡張期血圧\n\nです。ここで、個人を特定するにはwpidとidを組み合わせて行う形なっています。なので、id=1の人はwpid毎に一人ずついるので注意してください。\n 　\nこのデータを利用して、Rmrkdownを書いて、会社全体のレポートを上司に向けて作成してみてください。レポートの内容は、上司はパワーポイントでの発表を好むので、\n 　\n* スライド1：タイトル\n* スライド2：全体を集計した表\n* スライド3~：職場別に集計した表\n\nとしましょう。どのような集計方法とするかは、皆さんにお任せします。なお、会社の標準的なプレゼン資料のテンプレートは、kadai/bunseki_co_template.pptxの内容であるので、それを反映してください。\n\n課題2：\n　　\n次に、職場別に集計して上司にプレゼンした結果、ここの職場の担当者にも結果を送ってほしいと上司からいわれました。会社は伝統的にデータのやりとりはエクセルファイルで行われています。\n　　\n課題１の集計結果を、それなりに見栄えのする表を作って各職場の担当者に送信するためのエクセルファイルを職場の数だけ作成してみてください。\n　　\n　　\n課題3：\n　　\n上司から、BMIが30以上の人、BMIが16未満の人、あるいは血圧が160/100どちらかが超えている人を抽出して、個々のグラフを作成して、それを利用して産業看護職として健康相談をおこなうように指示がありました。\n　　\nこれまで、エクセルで条件に当てはまる人を抽出して、グラフと表を作成して、Wordファイルに貼り付けたうえで、コメントを書いていました。\n　　\nWordファイルを作成するところまでをRでやってみましょう。今回は、面談時に提示するだけなので、特に凝ったレイアウトは必要ありません。\n\n架空データの作成用スクリプト\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n{\n  \n  library(tidyverse)\n  \n  set.seed(12345)\n  sampledata <- tibble(\n    wpid = 1:5,\n    hiddenp = c(-5,0,5,3,-2),\n    n = c(100,80,200,40,400)\n  ) %>% \n    mutate(\n      data = map2(hiddenp,n,~{\n        param <- .x\n        n     <- .y \n        \n        tibble(id = 1:n) %>%\n          mutate(hiddenip = rnorm(n,param,5)) %>% \n          mutate(values = map(hiddenip,~{\n            tibble(\n              yr = 2000:2002,\n              bmi = rnorm(3,rnorm(1,23+hiddenip*0.1 )),\n              sbp = rnorm(3,rnorm(1,5*hiddenip+135)),\n              dbp = rnorm(3,rnorm(1,5*hiddenip+77 ))\n            )\n          }))\n      })\n    )\n  \n  sampledata2 <- sampledata  %>% \n    select(wpid,data) %>% \n    unnest(data) %>% \n    select(!hiddenip) %>% \n    unnest(values)\n  \n  summary(sampledata2)\n  \n  write_csv(sampledata2,\"kadai/data/data.csv\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}