{
  "hash": "8023d4b8b2c847039a79c7ae1a927983",
  "result": {
    "markdown": "---\ntitle: left_joinでの多対多の結合\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n多対多の動作、確認しておきましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nta_left <- tribble(\n  ~id, ~x,\n  1  , 11,\n  2  , 12,\n  3  , 13,\n  2  , 14,\n  1  , 15\n)\n\nta_right <- tribble(\n  ~id, ~y,\n  1  , \"a\",\n  2  , \"b1\",\n  2  , \"b2\",\n  3  , \"c\"\n)\n\nta_left\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 2\n     id     x\n  <dbl> <dbl>\n1     1    11\n2     2    12\n3     3    13\n4     2    14\n5     1    15\n```\n:::\n\n```{.r .cell-code}\nta_right\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 2\n     id y    \n  <dbl> <chr>\n1     1 a    \n2     2 b1   \n3     2 b2   \n4     3 c    \n```\n:::\n\n```{.r .cell-code}\nta_ta <- ta_left %>% \n  left_join(ta_right, by=\"id\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in left_join(., ta_right, by = \"id\"): Detected an unexpected many-to-many relationship between `x` and `y`.\ni Row 2 of `x` matches multiple rows in `y`.\ni Row 2 of `y` matches multiple rows in `x`.\ni If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n\n```{.r .cell-code}\nta_ta\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 3\n     id     x y    \n  <dbl> <dbl> <chr>\n1     1    11 a    \n2     2    12 b1   \n3     2    12 b2   \n4     3    13 c    \n5     2    14 b1   \n6     2    14 b2   \n7     1    15 a    \n```\n:::\n:::\n\n\n\nいかがでしょうか?\n\n結合後の表、もともとのta_leftの行数が\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(ta_left)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n\nであるのに対して、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(ta_ta)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n:::\n\n\n\nへと増加しており、行が水増しされたことが確認できます。\n\nこのように、結合前のデータと結合後のデータをnrow関数で行数の確認をして、不一致であれば、他対他の結合がおこなわれてしまっていることがわかります。\n\nもし、結合するまえに他対他になるかを調べたい場合は、count関数やdistinct関数を利用しても良いかもしれません。\n\n特に、右側、結合する方の表のIDが複数存在する場合は他対他になってしまうので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nta_right %>% count(id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n     id     n\n  <dbl> <int>\n1     1     1\n2     2     2\n3     3     1\n```\n:::\n\n```{.r .cell-code}\nta_right %>% count(id) %>% filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n     id     n\n  <dbl> <int>\n1     2     2\n```\n:::\n:::\n\n\n\nとしてあげて、nが1より大きいものがないかを確認しましょう。今回は一目瞭然ですが、何全行もあったりするとこれで重複しているものを発見できます。\n\n実例をみのであれば、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- tibble(\n  id = sample(1:300, 300, replace=TRUE),\n  val = rnorm(300, 100, 20)  \n)\n```\n:::\n\n\n\nこんな300行のデータに対して重複しているidを調べたい場合、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest %>% count(id) %>% filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 79 x 2\n      id     n\n   <int> <int>\n 1     5     2\n 2    12     2\n 3    21     3\n 4    26     2\n 5    41     2\n 6    44     2\n 7    46     2\n 8    47     2\n 9    48     5\n10    50     2\n# i 69 more rows\n```\n:::\n:::\n\n\nで重複しているIDと、その重複回数、nを瞬時に調べることができました。(尚、sampleやrnorm関数はランダムに数字がでてくるので、実行結果は皆さんのものと違います。)\n\n以上、多対多の結合でした。\n\n",
    "supporting": [
      "s05-070_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}