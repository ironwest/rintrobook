{
  "hash": "4e7087564f7213dc6877cf249e421cb4",
  "result": {
    "markdown": "---\ntitle: 実践4 Look Around(先読み、後読み)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nさて、ここまでで、メタ文字を駆使して数字と小数点を抜き出す方法について解説してきました。\n\nここからは、Look Aroundと呼ばれる特殊な書き方を解説します。\n\n例として、次文字列を見てください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexa <-c(\n  \"room200 3unit AM3:40 abc300ml\",\n  \"room201 4unit AM12:50 def125ml\",\n  \"room202 5unit PM4:00 ghi400ml\",\n  \"room203 6unit PM12:10 jkl50ml\"\n)\n\nexa\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"room200 3unit AM3:40 abc300ml\"  \"room201 4unit AM12:50 def125ml\"\n[3] \"room202 5unit PM4:00 ghi400ml\"  \"room203 6unit PM12:10 jkl50ml\" \n```\n:::\n:::\n\n\n\nこの文字列は適当なので、内容については突っ込みはなしでお願いします。\n\nここで、それぞれの要素の最後の部分、例えば1つ目の要素だとすると、\"abc300ml\"の300という数字を抜き出したいとしましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(exa,\"\\\\d+\")　#X\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ room<200> <3>unit AM<3>:<40> abc<300>ml\n[2] │ room<201> <4>unit AM<12>:<50> def<125>ml\n[3] │ room<202> <5>unit PM<4>:<00> ghi<400>ml\n[4] │ room<203> <6>unit PM<12>:<10> jkl<50>ml\n```\n:::\n:::\n\n\n\n残念ながら単純に\\\\d+とするだけでは一番最初の数字の塊を取得してしまいます。\n\nこういうケースではlook aroundと呼ばれる特殊な記載で「条件を付けて」取得するとうまくいきます。。\n\n条件の付け方を少し見ていきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(\"dog:dog;dog\", \"dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ <dog>:<dog>;<dog>\n```\n:::\n:::\n\n\n\nこの例で、真ん中のdogを対象としたい場合はdog(?=;)という書き方を利用します。<パターン1>(?=<パターン2>)と書くことで\n\nパターン1パターン2と並んでいる文字列を認識して、パターン1だけを取得するということができます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(\"dog:dog;dog\", \"dog(?=;)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ dog:<dog>;dog\n```\n:::\n:::\n\n\n\nまた、(?<=:)dogと書くことで、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(\"dog:dog;dog\", \"(?<=:)dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ dog:<dog>;dog\n```\n:::\n:::\n\n\n\n(?<=...)に該当する部分の後ろのパターンを選択することができます。\n\nということで、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexa\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"room200 3unit AM3:40 abc300ml\"  \"room201 4unit AM12:50 def125ml\"\n[3] \"room202 5unit PM4:00 ghi400ml\"  \"room203 6unit PM12:10 jkl50ml\" \n```\n:::\n:::\n\n\n\nの最後のmlの前の数字を拾うこと、できますでしょうか?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(exa,\"\\\\d+(?=ml)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ room200 3unit AM3:40 abc<300>ml\n[2] │ room201 4unit AM12:50 def<125>ml\n[3] │ room202 5unit PM4:00 ghi<400>ml\n[4] │ room203 6unit PM12:10 jkl<50>ml\n```\n:::\n:::\n\n\n\nですね？\n\nこの、(?=A)B と A(?<=B)を利用すれば\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(exa,\"(?<=room)\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ room<200> 3unit AM3:40 abc300ml\n[2] │ room<201> 4unit AM12:50 def125ml\n[3] │ room<202> 5unit PM4:00 ghi400ml\n[4] │ room<203> 6unit PM12:10 jkl50ml\n```\n:::\n\n```{.r .cell-code}\nstr_view(exa,\"(A|P)M\\\\d+:\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ room200 3unit <AM3:40> abc300ml\n[2] │ room201 4unit <AM12:50> def125ml\n[3] │ room202 5unit <PM4:00> ghi400ml\n[4] │ room203 6unit <PM12:10> jkl50ml\n```\n:::\n\n```{.r .cell-code}\nstr_view(exa,\"\\\\d+(?=ml)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ room200 3unit AM3:40 abc<300>ml\n[2] │ room201 4unit AM12:50 def<125>ml\n[3] │ room202 5unit PM4:00 ghi<400>ml\n[4] │ room203 6unit PM12:10 jkl<50>ml\n```\n:::\n\n```{.r .cell-code}\nstr_view(exa,\"\\\\d+(?=unit)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ room200 <3>unit AM3:40 abc300ml\n[2] │ room201 <4>unit AM12:50 def125ml\n[3] │ room202 <5>unit PM4:00 ghi400ml\n[4] │ room203 <6>unit PM12:10 jkl50ml\n```\n:::\n:::\n\n\n\nということもできます。\n\nまたここで、Look Aroundを用いる場合に困るケースをご紹介して、その解決方法も提示しておきます。\n\n\"abcd defg ghij jklm\"の\n |-1| |-2| |-3| |-4|\nそれぞれ、１から４を拾いたいばあい、どうすればよいかという\n\n問題です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- \"abcd defg ghij jklm\"\nstr_view(temp, \"^.+(?= )\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ <abcd defg ghij> jklm\n```\n:::\n:::\n\n\n\nとすると、実はLook Around、一番最後のスペースを拾ってしまうのでこの正規表現だとだめです。\n\nそういう場合は、?メタ文字を利用しましょう。\n\n範囲指定する+や{}の直後に?を置くことで、可能な限り短い範囲で拾うという動作が可能です\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(\"aabaaa\",\"a+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ <aa>b<aaa>\n```\n:::\n\n```{.r .cell-code}\nstr_view(\"aabaaa\",\"a+?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ <a><a>b<a><a><a>\n```\n:::\n\n```{.r .cell-code}\nstr_view(\"abaaaa\",\"a{2,3}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ ab<aaa>a\n```\n:::\n\n```{.r .cell-code}\nstr_view(\"abaaaa\",\"a{2,3}?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ ab<aa><aa>\n```\n:::\n:::\n\n\n\nなので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- \"abcd defg ghij jklm\"\nstr_view(temp, \"^.+(?= )\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ <abcd defg ghij> jklm\n```\n:::\n\n```{.r .cell-code}\nstr_view(temp, \"^.+?(?= )\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ <abcd> defg ghij jklm\n```\n:::\n:::\n\n\n\nこのように一つ目を拾うことができました。\n\nこの?マークを利用した正規表現、もう少し先のstringrの練習問題ででてきますのでこんな記号があったなくらいで結構ですので覚えておいてください。。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}