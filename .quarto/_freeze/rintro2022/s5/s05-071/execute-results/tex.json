{
  "hash": "ab1aa2369d63503c60b752245335341d",
  "result": {
    "markdown": "---\ntitle: 色々なjoin関数\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nここまで、left_joinの話ばかりでしたが、色々なjoin関数が用意されています。\n\n原則、left_joinがわかれば、たいてい何とかなるのですが、ここで、他の関数を紹介しておきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- tribble(\n  ~id, ~val1,\n  1  , 11,\n  2  , 12,\n  2  , 12,\n  4  , 14,\n  1  , 15,\n  5  , 16\n)\n\ndat2 <- tribble(\n  ~id, ~val2,\n  1  , 21,\n  2  , 22,\n  3  , 23,\n  4  , 24,\n  5  , 25\n)\n```\n:::\n\n\n\nまず、これまでのleft_joinはこれです。これは、左側にあるIDを残すというイメージです\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(dat1, dat2, by=\"id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n     id  val1  val2\n  <dbl> <dbl> <dbl>\n1     1    11    21\n2     2    12    22\n3     2    12    22\n4     4    14    24\n5     1    15    21\n6     5    16    25\n```\n:::\n:::\n\n\n\nleftではなく,right_joinというのもあって\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(dat2, dat1, by=\"id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n     id  val2  val1\n  <dbl> <dbl> <dbl>\n1     1    21    11\n2     1    21    15\n3     2    22    12\n4     2    22    12\n5     4    24    14\n6     5    25    16\n```\n:::\n:::\n\n\n\nleft_joinの左向けの結合ではなく、右向けの結合になります。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(dat1, dat2, by=\"id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 3\n     id  val1  val2\n  <dbl> <dbl> <dbl>\n1     1    11    21\n2     2    12    22\n3     2    12    22\n4     4    14    24\n5     1    15    21\n6     5    16    25\n7     3    NA    23\n```\n:::\n:::\n\n\n\nidはdat2が1から5まで一個ずつ、dat1が1が2つ、2が2つ、3が0こで、4，5が1個ずつなので、dat2の1と2が水増しされてるのと、3が「あたらない」ので、NAで表示されています。right_joinは、右側にあるIDが残るという風なイメージでもよいと思います。\n\n後は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 <- tribble(\n  ~id, ~val3,\n  1  ,  \"a\",\n  3  ,  \"b\",\n  4  ,  \"c\"\n)\n\ndat4 <- tribble(\n  ~id, ~val4,\n  3  , \"A\",\n  5  , \"B\",\n  6  , \"C\"\n)\n```\n:::\n\n\n\nというデータがあったとして、\n\n左のIDが残る、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(dat3 , dat4, by=\"id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n     id val3  val4 \n  <dbl> <chr> <chr>\n1     1 a     <NA> \n2     3 b     A    \n3     4 c     <NA> \n```\n:::\n:::\n\n\n\n右のIDが残る、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(dat3, dat4, by=\"id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n     id val3  val4 \n  <dbl> <chr> <chr>\n1     3 b     A    \n2     5 <NA>  B    \n3     6 <NA>  C    \n```\n:::\n:::\n\n\n\n\n\n両方にあるIDだけ残る、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(dat3, dat4, by=\"id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n     id val3  val4 \n  <dbl> <chr> <chr>\n1     3 b     A    \n```\n:::\n:::\n\n\n\nどちらか片方にあるIDだけ残る、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(dat3, dat4, by=\"id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 3\n     id val3  val4 \n  <dbl> <chr> <chr>\n1     1 a     <NA> \n2     3 b     A    \n3     4 c     <NA> \n4     5 <NA>  B    \n5     6 <NA>  C    \n```\n:::\n:::\n\n\n\nという関数もあります。\n\n他にも、filtering joinと呼ばれる、抽出するためのsemi_join関数やanti_join関数もありますが、とりあえず、現時点では、結合のためのjoinを理解できるとよいと思います。\n\n",
    "supporting": [
      "s05-071_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}