{
  "hash": "a2fbda3856e3630eb232c2afef5e89e7",
  "result": {
    "markdown": "---\ntitle: 実践 fill\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nそれではfill関数の動作、確認していきましょう。\n\nとはいってもスライドで解説したとおり、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(\n  dai = c(\"A\",NA,NA,NA,NA,NA,NA,NA,NA),\n  tyu = c(\"1\",NA,NA,\"2\",NA,NA,NA,NA,NA),\n  syo = c(\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"),\n  nam = c(\"い\",\"ろ\",\"は\",\"に\",\"ほ\",\"へ\",\"と\",\"ち\",\"り\")\n)\n\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  dai   tyu   syo   nam  \n  <chr> <chr> <chr> <chr>\n1 A     1     a     い   \n2 <NA>  <NA>  b     ろ   \n3 <NA>  <NA>  c     は   \n4 <NA>  2     a     に   \n5 <NA>  <NA>  b     ほ   \n6 <NA>  <NA>  c     へ   \n7 <NA>  <NA>  d     と   \n8 <NA>  <NA>  e     ち   \n9 <NA>  <NA>  f     り   \n```\n:::\n:::\n\n\n\nこのようあデータがある場合に、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% fill(dai,tyu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  dai   tyu   syo   nam  \n  <chr> <chr> <chr> <chr>\n1 A     1     a     い   \n2 A     1     b     ろ   \n3 A     1     c     は   \n4 A     2     a     に   \n5 A     2     b     ほ   \n6 A     2     c     へ   \n7 A     2     d     と   \n8 A     2     e     ち   \n9 A     2     f     り   \n```\n:::\n:::\n\n\n\n埋めたい列を指定してあげるだけです\n\nArgumentとしては、.directionというものがあります。ここで、downとupで方向を指定してうめることができます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% fill(dai,tyu, .direction=\"down\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  dai   tyu   syo   nam  \n  <chr> <chr> <chr> <chr>\n1 A     1     a     い   \n2 A     1     b     ろ   \n3 A     1     c     は   \n4 A     2     a     に   \n5 A     2     b     ほ   \n6 A     2     c     へ   \n7 A     2     d     と   \n8 A     2     e     ち   \n9 A     2     f     り   \n```\n:::\n\n```{.r .cell-code}\ndat %>% fill(dai,tyu, .direction=\"up\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  dai   tyu   syo   nam  \n  <chr> <chr> <chr> <chr>\n1 A     1     a     い   \n2 <NA>  2     b     ろ   \n3 <NA>  2     c     は   \n4 <NA>  2     a     に   \n5 <NA>  <NA>  b     ほ   \n6 <NA>  <NA>  c     へ   \n7 <NA>  <NA>  d     と   \n8 <NA>  <NA>  e     ち   \n9 <NA>  <NA>  f     り   \n```\n:::\n:::\n\n\n\nまた、もし欠損値でなくて、別の文字で空白が表されている場合、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(\n  dai = c(\"A\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"),\n  tyu = c(\"1\",\"\",\"\",\"2\",\"\",\"\",\"\",\"\",\"\"),\n  syo = c(\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"),\n  nam = c(\"い\",\"ろ\",\"は\",\"に\",\"ほ\",\"へ\",\"と\",\"ち\",\"り\")\n)\n\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  dai   tyu   syo   nam  \n  <chr> <chr> <chr> <chr>\n1 \"A\"   \"1\"   a     い   \n2 \"\"    \"\"    b     ろ   \n3 \"\"    \"\"    c     は   \n4 \"\"    \"2\"   a     に   \n5 \"\"    \"\"    b     ほ   \n6 \"\"    \"\"    c     へ   \n7 \"\"    \"\"    d     と   \n8 \"\"    \"\"    e     ち   \n9 \"\"    \"\"    f     り   \n```\n:::\n:::\n\n\n\nif_elseとfillを組み合わせてあげると埋めることができます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  mutate(\n    dai = if_else(dai == \"\", NA_character_, dai),\n    tyu = if_else(tyu == \"\", NA_character_, tyu)\n  ) %>% \n  fill(dai, tyu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  dai   tyu   syo   nam  \n  <chr> <chr> <chr> <chr>\n1 A     1     a     い   \n2 A     1     b     ろ   \n3 A     1     c     は   \n4 A     2     a     に   \n5 A     2     b     ほ   \n6 A     2     c     へ   \n7 A     2     d     と   \n8 A     2     e     ち   \n9 A     2     f     り   \n```\n:::\n:::\n\n\n\n以上、簡単ですが使い方でした。\n少し練習しておきましょう。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}