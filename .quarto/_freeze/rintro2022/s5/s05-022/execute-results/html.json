{
  "hash": "394b162b43c346c6a45b0d90a47b6496",
  "result": {
    "markdown": "---\ntitle: ロジカルオペレーターと!\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nだいぶ長々とオペレーターのことを解説してきますが、ここで学んだいること、全てはこの後の行操作を行う場合にかなり重要な知識となりますのでもう少しがんばってください。\n\n比較オペレーター以外に、ロジカルオペレーターというものがあります。\n\nロジカルオペレーターは\n\n* &\n* |\n\nの2種類です。(本当は&&,||,xorとか他にもありますが入門の時点ではこの二つの動作を覚えておくだけで良いと思います。)\n\n&は、左右両方がTRUEであれば、TRUEでそれ以外は全部FALSEです。|は、左右どちらかがTRUEであればTRUEになります。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE  & TRUE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nTRUE  & FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nFALSE & TRUE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nFALSE & FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nTRUE  | TRUE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nTRUE  | FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE | TRUE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE | FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\nまた、!はselectでは選択しないという否定の意味が持たされてありましたが、ロジカルの前に!を置くことでTRUE、FALSEをひっくり返すことが可能です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n!(TRUE&FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n!c(T,T,F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n:::\n\n\n\n >, <, >=, <=, ==, != ,& | ,!これらの記号を組み合わせて、条件設定を考えることが、この後お伝えする行の操作で非常に重要になります。\n\n行操作は列操作と違い、時に何万というデータに対してTRUEとFALSEを振り分けて、抽出・加工するという作業になります。\n\nどんな文字列や値が含まれたベクトルに対しても、思うようにTRUE, FALSEを設定できるようになると、データクリーニングの自由度はかなり高くなります。\n\nそのために、たとえば、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1,2,3,4,5,6)\n\nvec[vec > 3] #3より大きい数字をとりだす\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 5 6\n```\n:::\n\n```{.r .cell-code}\nvec[vec %% 2 == 0] # %%は「あまり」を表すので、\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6\n```\n:::\n\n```{.r .cell-code}\n　　　　　　　　　 # 2で割ったあまりが0となるものを\n　　　　　　　　　 # TRUEとして2の倍数をとりだしたり\nvec[vec >= 2 & vec <= 5] #2以上かつ5以下の数字をとりだしたり\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5\n```\n:::\n:::\n\n\n\nすることができるようになります。それぞれ\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec > 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nvec %% 2 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nvec >= 2 & vec <= 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\n\nのTRUE、FALSEの値の位置とvecの位置を\\確認しておいてください。\n\n以上、Logical型とその周辺についての解説と実践は終了です。実践部分が結構長くなったので、練習問題で確実に内容を理解していることを確認しておきましょう。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}