{
  "hash": "f20d6ef90d6bc7c4548090f48ed94566",
  "result": {
    "markdown": "---\ntitle: 実践 case_when\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nif_elseはTRUE/FALSEをかえす2条件のみで結果を場合分けしますが、case_whenは複数条件で条件分岐ができます。\n\nスライドでお示ししたように、<ロジカルとなる式> ~ <返したい結果>を繰り返すことで好きな条件で結果を返せます。\n\n実験してみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(num = c(1:5))\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 1\n    num\n  <int>\n1     1\n2     2\n3     3\n4     4\n5     5\n```\n:::\n\n```{.r .cell-code}\ndat %>% \n  mutate(kekka = case_when(\n    num == 1 ~ \"one\",\n    num == 2 ~ \"two\",\n    num == 3 ~ \"three\",\n    TRUE ~ \">3\"\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 2\n    num kekka\n  <int> <chr>\n1     1 one  \n2     2 two  \n3     3 three\n4     4 >3   \n5     5 >3   \n```\n:::\n:::\n\n\n\nこの例では、num列が1であればone、2であればtwo、3であればthree、それ以外で>3という文字列を返す結果になっています\n\ncase_whenで注意しておかないといけないことはif_elseと同様でcase_when関数が返す結果の型をそろえておくことです。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  mutate(kekka = case_when(\n    num == 1 ~ \"one\",\n    num == 2 ~ \"two\",\n    num == 3 ~ 3,\n    TRUE ~ \">3\"\n  ))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\ni In argument: `kekka = case_when(...)`.\nCaused by error in `case_when()`:\n! Can't combine `..1 (right)` <character> and `..3 (right)` <double>.\n```\n:::\n:::\n\n\n\nもう一つ、実行される順番に注意が必要です。case_when関数は上の条件が優先されます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  mutate(kekka = case_when(\n    num == 1 ~ \"one\",\n    num == 1 ~ \"two\",\n    num == 1 ~ \"three\",\n    TRUE ~ \">3\"\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 2\n    num kekka\n  <int> <chr>\n1     1 one  \n2     2 >3   \n3     3 >3   \n4     4 >3   \n5     5 >3   \n```\n:::\n:::\n\n\n\nまた、最後のTRUEという「必ず当たる」条件を書いておかないと、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  mutate(kekka = case_when(\n    num == 1 ~ \"one\",\n    num == 2 ~ \"two\",\n    num == 3 ~ \"three\"\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 2\n    num kekka\n  <int> <chr>\n1     1 one  \n2     2 two  \n3     3 three\n4     4 <NA> \n5     5 <NA> \n```\n:::\n:::\n\n\n\n欠損値が生じてしまいますので、注意が必要です。\n\n以上、case_whenの実践でした。\n\nそれではif_elseとcase_whenの練習問題をやってみましょう\n\n",
    "supporting": [
      "s05-047_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}