{
  "hash": "c3360391a49a9505b1c0c6226f1f28e8",
  "result": {
    "markdown": "---\ntitle: 練習問題(解答)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nそれでは解答です。\n\n### Logical\n\n練習問題1\n\nLogical型2種類はなんでしょうか?またその短縮した書き方を書いてください\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\nが2種類です。短縮するなら\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nT\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nF\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n-1\n\nLogical型を数字に変換した場合と文字列に変換した場合をそれぞれ実行してみてください\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(c(T,F))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0\n```\n:::\n\n```{.r .cell-code}\nas.character(c(T,F))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"TRUE\"  \"FALSE\"\n```\n:::\n:::\n\n\n\n-2\n\n次のうち、FALSEとなるのはどれでしょうか?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.logical(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nas.logical(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n\n練習問題3\n\nTRUE + TRUEの結果は何になりますか?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nT + T\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n\n### ==オペレーター\n\n練習問題4\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 10\nb <- \"\"\n\na == b #がTRUEとなる値をbに入れてください。\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na <- 10\nb <- 10\na == b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n### 比較オペレーター\n\n練習問題5　\n\n次の実行結果がすべてTRUEとなるように==以外を用いて書き換えてくださいまた、各オペレーターは1回のみ利用できます(答えは複数あります)>, <, >=, <=, !=,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 <  6 #5 == 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 <= 6 #5 == 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 != 6 #5 == 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 >  4 #5 == 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 >= 4 #5 == 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 != 4 #5 == 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 <= 5 #5 == 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 >= 5 #5 == 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n\"dog\" <= \"dog\" #\"dog\" == \"dog\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n\"dog\" >= \"dog\" #\"dog\" == \"dog\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n### ベクトルとロジカル\n\n練習問題6 \n\n次のスクリプトの実行結果がどうなるか、予想してみてください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1,2,3,4,5)\n\nvec[TRUE]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n\nこれは、c(T,T,T,T,T)と同じ意味になります。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[c(T,T,T,T,F)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4\n```\n:::\n:::\n\n\n\nこれは、そのまま、Tがある部分が取り出されます\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[c(T,F)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n:::\n\n\n\nこれの動作、少しわかりにくいかもしれませんが、\n\n1 2 3 4 5 \nT F T F T F\n\nとベクトルの長さが不一致の場合、短いほうのベクトルが「繰り返される」ので、このような結果になります\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[vec < 3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n:::\n\n\n\nこれは\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec < 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n\nのT、FのTの位置がとりだされているだけですね。\n\n### ロジカルオペレーターと!\n\n練習問題7 \n\n次の &オペレーターの左側のベクトルに!をを書き足して、実行結果がすべてTRUEとなるようにしてください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(T,F,T,F,T) & c(T,T,T,T,T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nT&T#が唯一TRUEと返ってくるので、\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\nFALSEの前に!でTRUEに変換してあげましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(T,!F,T,!F,T) & c(T,T,T,T,T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE TRUE\n```\n:::\n:::\n\n\n\n練習問題8 \n\n次の |オペレーターの左側のベクトルに!をを書き足して、実行結果がすべてFALSEとなるようにしてください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(T,F,T,F,T) | c(F,F,F,F,F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\n\nFと返ってくるのが、F|Fの時だけなので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(!T,F,!T,F,!T) | c(F,F,F,F,F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n\n練習問題9\n\n次のvecからvec[...]の書き方を使って\n\n9-1 3をとりだしてください\n9-2 2の倍数を取り出してください\n9-3 7の倍数を取り出してください\n9-4 奇数をとりだしてください。\n9-5 3の倍数かつ5の倍数あるいは4の倍数かつ7の倍数をとりだしてください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1:50)\n```\n:::\n\n\n\n9-1 3をとりだしてください\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[vec==3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n\n9-2 2の倍数を取り出してください\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[vec %% 2 == 0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50\n```\n:::\n:::\n\n\n\n9-3 7の倍数を取り出してください\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[vec %% 7 == 0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7 14 21 28 35 42 49\n```\n:::\n:::\n\n\n\n9-4 奇数をとりだしてください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[vec %% 2 == 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n```\n:::\n:::\n\n\n\n9-5 3の倍数かつ5の倍数あるいは4の倍数かつ7の倍数をとりだしてください。\n\n複雑な条件の場合、ロジカルを分けて作成すると見通しがよくなります\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaisu3and5 <- (vec %% 3 == 0) & (vec %% 5 == 0)\nbaisu4and7 <- (vec %% 4 == 0) & (vec %% 7 == 0)\n\nvec[baisu3and5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15 30 45\n```\n:::\n\n```{.r .cell-code}\nvec[baisu4and7]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 28\n```\n:::\n\n```{.r .cell-code}\nvec[baisu3and5 | baisu4and7]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15 28 30 45\n```\n:::\n:::\n\n\n\nできました。ちなみに、1行でかきたいのであれば、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[((vec %% 3 == 0) & (vec %% 5 == 0))|((vec %% 4 == 0) & (vec %% 7 == 0))]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15 28 30 45\n```\n:::\n:::\n\n\n\nと、かなりわかりにくくなります。\n\nただし、複雑な場合でも、次のような形で書いても大丈夫なので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[ \n  ( (vec %% 3 == 0) & (vec %% 5 == 0) ) \n  　| \n  ( (vec %% 4 == 0) & (vec %% 7 == 0) ) \n]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15 28 30 45\n```\n:::\n:::\n\n\n\n特に誰かとスクリプトを共有する場合は分かりやすくする意味で改行やスペースをうまく使えるとよいと思います。\n\nお疲れさまでした。それでは、ここで学んだLogical型を利用して、行の操作の関数を学んでいきます\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}