{
  "hash": "d5b01b46c0691848d7d96a22053bcf01",
  "result": {
    "markdown": "---\ntitle: extract() 解説と実践\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\ntidyr::には、separateの他にも、正規表現でグループを指定して取り出すような関数も用意されています。\n\n使い方はseparate関数と一緒ですが、sepではなく、regexというargumentを利用しますregexは、正規表現で「グループ」を指定することができますグループの指定の仕方は簡単で()でくくるだけとなります。\n\nやってみましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(tgt = c(\"glu:102 mg/dl\",\"AST:41 IU/L\",\n                      \"ALT:32 IU/L\",\"GGT:33 IU/L\"))\n\ndat \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 1\n  tgt          \n  <chr>        \n1 glu:102 mg/dl\n2 AST:41 IU/L  \n3 ALT:32 IU/L  \n4 GGT:33 IU/L  \n```\n:::\n:::\n\n\n\nこれを分けてみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  extract(col=tgt,into=c(\"name\",\"value\",\"unit\"),\n          regex=\"(.+):(.+) (.+)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  name  value unit \n  <chr> <chr> <chr>\n1 glu   102   mg/dl\n2 AST   41    IU/L \n3 ALT   32    IU/L \n4 GGT   33    IU/L \n```\n:::\n:::\n\n\n\nどうでしょうか?\n\nこちらはこちらで便利ですね?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat4 <- tibble(\n  tgt = c(\"glu010000890095\",\n          \"ast003000400050\",\n          \"alt002000300040\")\n)\n```\n:::\n\n\n\n位置で分けるものも、{}での長さ指定を組み合わせると\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat4 %>% \n  extract(col=tgt, into=c(\"name\",\"v1\",\"v2\",\"v3\"),\n          regex=\"(.{3})(.{4})(.{4})(.{4})\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  name  v1    v2    v3   \n  <chr> <chr> <chr> <chr>\n1 glu   0100  0089  0095 \n2 ast   0030  0040  0050 \n3 alt   0020  0030  0040 \n```\n:::\n:::\n\n\n\nこんな感じでできます。\n\nそれでは、練習問題を解いていきましょう。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}