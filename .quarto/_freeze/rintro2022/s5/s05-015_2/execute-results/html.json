{
  "hash": "94f01517e475e98b68450f24e77bd7ec",
  "result": {
    "markdown": "---\ntitle: selectの実践\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nそれでは、select関数を実際に使っていきましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(a=1,b=1,c=1,d=1,e=1,f=1,g=1)\n\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n      a     b     c     d     e     f     g\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1     1     1     1     1     1     1\n```\n:::\n:::\n\n\n\n練習のために、まずは簡単な例から確認していきます。\n\n基本的なselectでの選択は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      a\n  <dbl>\n1     1\n```\n:::\n:::\n\n\n\nで1列だけを選択する他、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(a,c,f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n      a     c     f\n  <dbl> <dbl> <dbl>\n1     1     1     1\n```\n:::\n:::\n\n\n\nの様に、複数列を選択することも可能でした。\n\n !を使うことで、除外選択も可能で、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(!a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n      b     c     d     e     f     g\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1     1     1     1     1     1\n```\n:::\n:::\n\n\n\nで、a列だけを除外することもできます。\n\n複数列を同時に除外したい場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(!c(a,c,d,g))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n      b     e     f\n  <dbl> <dbl> <dbl>\n1     1     1     1\n```\n:::\n:::\n\n\n\nのように、c()でくくってあげて、その対象全体を!で除外するというような書き方になります\n\neverything():\n\neverything()は全部選択できました。この関数、単独でつかうと\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n      a     b     c     d     e     f     g\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1     1     1     1     1     1     1\n```\n:::\n:::\n\n\n\nまったく同じ結果になるので、あんまり存在意義を感じないかもしれませんが、列を並び替えたい時に便利です。例えば、今、aからgまでの順番で列が並んでいますが、これをg,a,b,c,d,e,fという順番で並び替えたいときに、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(g,a,b,c,d,e,f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n      g     a     b     c     d     e     f\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1     1     1     1     1     1     1\n```\n:::\n:::\n\n\n\nと書くのではなく、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(g, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n      g     a     b     c     d     e     f\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1     1     1     1     1     1     1\n```\n:::\n:::\n\n\n\nと描くことで目的達成です。今の例だと、列名自体は短いのでそれほど手間ではないかもしれませんが、everythingが該当する列名が、id, gender, age, school, income, health_status,q1, q2, .....というようなアンケートデータであったり、列数が100個あるとかの場合は、それをいちいち書くことなく、並び替えることができます。\n\neverything,matches,starts_with, ends_withはselection helperと呼ばれる関数群です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(\n  qA1=1,\n  qA2=1,\n  qA3=1,\n  qA4a1=1,\n  qA4a2=1,\n  qA4b1=1,\n  qA4b2=1,\n  qA1_supp = 1,\n  qA2_supp = 1,\n  qB1=1,\n  qB2=1,\n  qB3=1,\n  qB4a1=1,\n  qB4a2=1,\n  qB4b1=1,\n  qB4b2=1,\n  qB1_supp = 1,\n  qB2_supp = 2\n)\n\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 18\n    qA1   qA2   qA3 qA4a1 qA4a2 qA4b1 qA4b2 qA1_supp qA2_supp   qB1   qB2   qB3\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> <dbl> <dbl> <dbl>\n1     1     1     1     1     1     1     1        1        1     1     1     1\n# ℹ 6 more variables: qB4a1 <dbl>, qB4a2 <dbl>, qB4b1 <dbl>, qB4b2 <dbl>,\n#   qB1_supp <dbl>, qB2_supp <dbl>\n```\n:::\n:::\n\n\n\n仮に、こんな列名を持つアンケートデータがあったとしましょう。\n\nデータからqAで始まる列だけを取り出したい場合、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(starts_with(\"qa\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 9\n    qA1   qA2   qA3 qA4a1 qA4a2 qA4b1 qA4b2 qA1_supp qA2_supp\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl>\n1     1     1     1     1     1     1     1        1        1\n```\n:::\n:::\n\n\n\nとこんな感じで、まとめて取り出すことが可能です。\n\n他にも、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(starts_with(\"qA4\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  qA4a1 qA4a2 qA4b1 qA4b2\n  <dbl> <dbl> <dbl> <dbl>\n1     1     1     1     1\n```\n:::\n\n```{.r .cell-code}\ndat %>% select(starts_with(\"qB4\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  qB4a1 qB4a2 qB4b1 qB4b2\n  <dbl> <dbl> <dbl> <dbl>\n1     1     1     1     1\n```\n:::\n:::\n\n\n\nこんなことができます。基本的には大文字、小文字の区別はしてくれません。後ほど解説するLogical型というものを勉強した後でHelpファイルを見ていただくと、区別する方法がわかりますので、興味があれば見てみてください。\n\nends_withを使うと、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(ends_with(\"_supp\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  qA1_supp qA2_supp qB1_supp qB2_supp\n     <dbl>    <dbl>    <dbl>    <dbl>\n1        1        1        1        2\n```\n:::\n:::\n\n\n\nと、このように末尾の文字列に対してまとめてselectができるので便利です。\n\nこのまとめて、選択できる関数、!c()と同じように、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(!ends_with(\"_supp\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 14\n    qA1   qA2   qA3 qA4a1 qA4a2 qA4b1 qA4b2   qB1   qB2   qB3 qB4a1 qB4a2 qB4b1\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1     1     1     1     1     1     1     1     1     1     1     1     1\n# ℹ 1 more variable: qB4b2 <dbl>\n```\n:::\n:::\n\n\n\nまとめて除外するようなことも可能です。\n\n部分一致で選択をしたい場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(matches(\"A1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n    qA1 qA4a1 qA1_supp qB4a1\n  <dbl> <dbl>    <dbl> <dbl>\n1     1     1        1     1\n```\n:::\n:::\n\n\n\nとすると選択できました。\n\nselection helper、若干ややこしいかもしれないので、最初のうちは迷いそうであれば、地道に打ち出すでもよいと思います（私も、selection helperをそれなりに使うようになったの、学びはじめてだいぶたってからでした。最初から知ってたら結構楽できる場面も多いので、ちょっと難しいですがここで取り上げた次第です。)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(matches(\"A1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n    qA1 qA4a1 qA1_supp qB4a1\n  <dbl> <dbl>    <dbl> <dbl>\n1     1     1        1     1\n```\n:::\n\n```{.r .cell-code}\ndat %>% select(qA1, qA4a1, qA1_supp, qB4a1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n    qA1 qA4a1 qA1_supp qB4a1\n  <dbl> <dbl>    <dbl> <dbl>\n1     1     1        1     1\n```\n:::\n:::\n\n\n\n最後に、実はrename関数と同じ書き方をすることで選択しながら、列名を変更することも可能ですのでお示ししておきましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% select(question_A1 = qA1,\n               question_A4a1 = qA4a1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  question_A1 question_A4a1\n        <dbl>         <dbl>\n1           1             1\n```\n:::\n:::\n\n\n\nおつかれさまでした!\n次の動画でselectの練習問題を解いておきましょう。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}