{
  "hash": "234b889a95ed6e48f380fd38c8eedddf",
  "result": {
    "markdown": "---\ntitle: arrange()の実践\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nそれでは、arrange関数の動作を実際のRで確認していきましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(\n  a = c(1,3,2,4,3,5,3,2,5,1),\n  b = c(5,2,3,4,5,2,1,2,1,4),\n  c = c(1,2,3,4,5,6,7,8,9,10)\n)\n```\n:::\n\n\n\nまずは、1列指定のarrangeですが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% arrange(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     1     5     1\n 2     1     4    10\n 3     2     3     3\n 4     2     2     8\n 5     3     2     2\n 6     3     5     5\n 7     3     1     7\n 8     4     4     4\n 9     5     2     6\n10     5     1     9\n```\n:::\n\n```{.r .cell-code}\ndat %>% arrange(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     3     1     7\n 2     5     1     9\n 3     3     2     2\n 4     5     2     6\n 5     2     2     8\n 6     2     3     3\n 7     4     4     4\n 8     1     4    10\n 9     1     5     1\n10     3     5     5\n```\n:::\n:::\n\n\n\nc列が元の並び順に番号を振ってあるので、arrange関数が確かにデータを並び替えてくれているのがわかると思います。\n\ndescending order、（降順）にならべるdescも利用してみましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% arrange(desc(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     5     2     6\n 2     5     1     9\n 3     4     4     4\n 4     3     2     2\n 5     3     5     5\n 6     3     1     7\n 7     2     3     3\n 8     2     2     8\n 9     1     5     1\n10     1     4    10\n```\n:::\n\n```{.r .cell-code}\ndat %>% arrange(desc(b))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     1     5     1\n 2     3     5     5\n 3     4     4     4\n 4     1     4    10\n 5     2     3     3\n 6     3     2     2\n 7     5     2     6\n 8     2     2     8\n 9     3     1     7\n10     5     1     9\n```\n:::\n:::\n\n\n\nたしかに、降順に並んでいますね?複数していする場合\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% arrange(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     1     5     1\n 2     1     4    10\n 3     2     3     3\n 4     2     2     8\n 5     3     2     2\n 6     3     5     5\n 7     3     1     7\n 8     4     4     4\n 9     5     2     6\n10     5     1     9\n```\n:::\n\n```{.r .cell-code}\ndat %>% arrange(a,b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     1     4    10\n 2     1     5     1\n 3     2     2     8\n 4     2     3     3\n 5     3     1     7\n 6     3     2     2\n 7     3     5     5\n 8     4     4     4\n 9     5     1     9\n10     5     2     6\n```\n:::\n:::\n\n\n\nを比べてみてください。arrange(a)だと、b列の最初の2行は5，4とならんでいますが\n\narrange(a,b)とすると、b列の最初の二行は4，5とならんでいます。\n\ndescは複数列を指定しても有効なので、a列、b列の並び替え方の組み合わせは、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% arrange(a      ,     b )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     1     4    10\n 2     1     5     1\n 3     2     2     8\n 4     2     3     3\n 5     3     1     7\n 6     3     2     2\n 7     3     5     5\n 8     4     4     4\n 9     5     1     9\n10     5     2     6\n```\n:::\n\n```{.r .cell-code}\ndat %>% arrange(a      ,desc(b))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     1     5     1\n 2     1     4    10\n 3     2     3     3\n 4     2     2     8\n 5     3     5     5\n 6     3     2     2\n 7     3     1     7\n 8     4     4     4\n 9     5     2     6\n10     5     1     9\n```\n:::\n\n```{.r .cell-code}\ndat %>% arrange(desc(a),     b )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     5     1     9\n 2     5     2     6\n 3     4     4     4\n 4     3     1     7\n 5     3     2     2\n 6     3     5     5\n 7     2     2     8\n 8     2     3     3\n 9     1     4    10\n10     1     5     1\n```\n:::\n\n```{.r .cell-code}\ndat %>% arrange(desc(a),desc(b))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n       a     b     c\n   <dbl> <dbl> <dbl>\n 1     5     2     6\n 2     5     1     9\n 3     4     4     4\n 4     3     5     5\n 5     3     2     2\n 6     3     1     7\n 7     2     3     3\n 8     2     2     8\n 9     1     5     1\n10     1     4    10\n```\n:::\n:::\n\n\n\n全部で4通りです。\n\n以上arrangeの実践でした。次は練習問題を解いておきましょう。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}