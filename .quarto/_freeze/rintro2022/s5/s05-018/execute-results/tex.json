{
  "hash": "9e361b27d859d89da3bc99ce423e1547",
  "result": {
    "markdown": "---\ntitle: 導入\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nそれでは、ロジカル型の動作や特徴を少し細かくみていきましょうまず、ロジカル型は\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nstr(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n logi TRUE\n```\n:::\n\n```{.r .cell-code}\nstr(FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n logi FALSE\n```\n:::\n:::\n\n\n\nTRUE FALSEと書くことでRにとっては特に指定したり関数で変換したりすることが必要なく、ロジカル型として認識されています。\n\n短縮して、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nT\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nF\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\nと書くこともできます。逆に、TやFに何か値を代入するのは厳禁です。\n\nこのTRUE,FALSE,型変換をしてみると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nas.character(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"TRUE\"\n```\n:::\n:::\n\n\n\nこんな感じでas.numericで変換するとTRUEは1as.characterで変換するとTRUEは\"TRUE\"になります。\n\nこの動作、因子型をおもいだしませんか?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- as.factor(c(\"dog\",\"cat\",\"dog\"))\nas.numeric(v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 1 2\n```\n:::\n\n```{.r .cell-code}\nas.character(v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dog\" \"cat\" \"dog\"\n```\n:::\n:::\n\n\n\nただ、因子型と違うのは、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv + v\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in Ops.factor(v, v): '+' not meaningful for factors\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA NA NA\n```\n:::\n:::\n\n\n\nはエラーが起こりますが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE, TRUE, FALSE) + c(FALSE, TRUE, TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 1\n```\n:::\n:::\n\n\n\nLogical型はこのように計算ができてしまいます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE + TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nTRUE + FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nFALSE + FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n\nということでTRUEの正体は「1」で、FALSEの正体は「0」になります\n\nLogical型への変換は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.logical(\"FALSE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nas.logical(\"TRUE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nas.logical(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\nでそれぞれFALSE、TRUEに変換できます。\n\n尚、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.logical(\"dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nas.logical(0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(-5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(-3.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n文字列型の場合はTRUEやFALSE以外のものをロジカル型に変換しようとすると欠損、NA、が返されますが、数字を与えると、0以外がすべてTRUEと帰ってくるので「プログラム」を描く場合に注意しておく必要があります。\n\n",
    "supporting": [
      "s05-018_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}