{
  "hash": "2a036811f091fa745985de2b6dc480cb",
  "result": {
    "markdown": "---\ntitle: 解説 list \npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nそれではreplace_naの動作を確認していきましょう。ただ、そのまえに、Listについて少しだけ説明させてください。\n\nベクトルは、このように名前をつけて実行すると\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec1 <- c(name1 = 1, name2 = 2, name3 = 3)\nvec1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname1 name2 name3 \n    1     2     3 \n```\n:::\n:::\n\n\n\nこうなりましたね?\n\n繰り返しになりますが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec2 <- c(name1 = 1, name2 = \"2\", name3 = 3)\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nname1 name2 name3 \n  \"1\"   \"2\"   \"3\" \n```\n:::\n:::\n\n\n\n全て同じ型でないと自動的に文字型に置き換わります\n\nここで、cの代わりにListを用いてみます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1 <- list(name1 = 1, name2 = \"2\", name3 = 3)\n\nl1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$name1\n[1] 1\n\n$name2\n[1] \"2\"\n\n$name3\n[1] 3\n```\n:::\n:::\n\n\n\ncと形が少し違いますがデータが入力した形で保存されています\n\nこのlistで保存された値は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nl1[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2\"\n```\n:::\n\n```{.r .cell-code}\nl1[[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nl1$name1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nl1$name2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2\"\n```\n:::\n\n```{.r .cell-code}\nl1$name3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n\n[[]]か$でとりだすことができます。\n\nここで注目していただきたいのが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1$name1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nl1$name2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2\"\n```\n:::\n\n```{.r .cell-code}\nl1$name3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n\nがそれぞれ、型が違うというところです。\n\nベクトルが「同じ要素」の集合を作るものであれば、リストは、「オブジェクト」の集合を作るもの\n\nとなっており、Rのオブジェクトであれば何でも保存できます。\n\n例えば、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchar <- \"これは文字列型の要素です\"\nvect <- c(1:10)\ndat <- iris %>% head()\ngg <- ggplot(dat) + geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species))\n\nlist_test <- list(\n  single_character = char,\n  a_vector = vect,\n  data_frame = dat,\n  even_plot = gg\n)\n```\n:::\n\n\n\nとしてあげると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_test\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$single_character\n[1] \"これは文字列型の要素です\"\n\n$a_vector\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$data_frame\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n$even_plot\n```\n:::\n\n::: {.cell-output-display}\n![](s05-058_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nlist_test$data_frame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n\n```{.r .cell-code}\nlist_test$even_plot\n```\n\n::: {.cell-output-display}\n![](s05-058_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n\n\nこんな感じでこれまで学んだRのありとあらゆるオブジェクトを保存することが可能です。\n\n今回のreplace_na関数では、複数の列に対して置き換える要素の型が常に一緒とは限らないため、複数の要素を利用できるlistを用いて記載する形となっています。\n\nそれでは、次の動画では、実際にこのlistを利用した、置き換えの指定方法を確認していきましょう。\n\n",
    "supporting": [
      "s05-058_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}