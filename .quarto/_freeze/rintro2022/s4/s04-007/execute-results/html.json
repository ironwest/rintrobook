{
  "hash": "d8309fdabeb5d5ae9c99406ec54a9bb6",
  "result": {
    "markdown": "---\ntitle: レベルを置き換える\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\nそれでは、因子型の水準を手動で置き換えていきましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalcohol = c(\"週1日以内\",\"週4-6日\",\"週4-6日\",\"毎日\",\"のまない\",\"週1-3日\",\"毎日\")\nvec_f <- as.factor(alcohol)\nlevels(vec_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"のまない\"  \"週1-3日\"   \"週1日以内\" \"週4-6日\"   \"毎日\"     \n```\n:::\n:::\n\n\n\nは実行すると、水準を表示してくれますが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(vec_f) <- c(\"いち\",\"に\",\"さん\",\"し\",\"ご\")\n\nlevels(vec_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"いち\" \"に\"   \"さん\" \"し\"   \"ご\"  \n```\n:::\n:::\n\n\n\nこのように、代入してあげると、対応表を与えた文字列で置き換える使い方も可能です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_f\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] さん し   し   ご   いち に   ご  \nLevels: いち に さん し ご\n```\n:::\n:::\n\n\n\n置き換えた結果が反映されていますね?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec1 <- as.factor(alcohol)\n\nvec2 <- vec1\nlevels(vec2) <- c(\"いち\",\"に\",\"さん\",\"し\",\"ご\")\n\nvec1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 週1日以内 週4-6日   週4-6日   毎日      のまない  週1-3日   毎日     \nLevels: のまない 週1-3日 週1日以内 週4-6日 毎日\n```\n:::\n\n```{.r .cell-code}\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] さん し   し   ご   いち に   ご  \nLevels: いち に さん し ご\n```\n:::\n\n```{.r .cell-code}\nas.numeric(vec1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 4 5 1 2 5\n```\n:::\n\n```{.r .cell-code}\nas.numeric(vec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 4 5 1 2 5\n```\n:::\n:::\n\n\n\nレベルを置き換えた後、数字型にするとvec1とvec2は一致していますが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(vec1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"週1日以内\" \"週4-6日\"   \"週4-6日\"   \"毎日\"      \"のまない\"  \"週1-3日\"  \n[7] \"毎日\"     \n```\n:::\n\n```{.r .cell-code}\nas.character(vec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"さん\" \"し\"   \"し\"   \"ご\"   \"いち\" \"に\"   \"ご\"  \n```\n:::\n:::\n\n\n\n文字列型に置き換えると、このように結果が変わっているということを確認しておいてください。\n\nそれで、この置き換えですが、一部だけを置き換えることも可能です。\n\nその場合、[]での位置指定を行ってあげると比較的簡単に狙った場所の値を置き換えられます。\n\n[]は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"いち\",\"に\",\"さん\",\"し\",\"ご\")[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"いち\"\n```\n:::\n\n```{.r .cell-code}\nc(\"いち\",\"に\",\"さん\",\"し\",\"ご\")[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"に\"\n```\n:::\n\n```{.r .cell-code}\nc(\"いち\",\"に\",\"さん\",\"し\",\"ご\")[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"さん\"\n```\n:::\n\n```{.r .cell-code}\nc(\"いち\",\"に\",\"さん\",\"し\",\"ご\")[4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"し\"\n```\n:::\n\n```{.r .cell-code}\nc(\"いち\",\"に\",\"さん\",\"し\",\"ご\")[5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ご\"\n```\n:::\n:::\n\n\n\nこのように、ベクトルの後に、数字を入れて\n指定してあげることでその場所の要素を\n取り出すことができます。また\n変数に対しては代入も可能なので\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"いち\",\"に\",\"さん\",\"し\",\"ご\")[1] <- \"ONE\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in c(\"いち\", \"に\", \"さん\", \"し\", \"ご\")[1] <- \"ONE\": target of assignment expands to non-language object\n```\n:::\n:::\n\n\n\nこれはだめですが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- c(\"いち\",\"に\",\"さん\",\"し\",\"ご\")\ntemp[1] <- \"ONE\"\ntemp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ONE\"  \"に\"   \"さん\" \"し\"   \"ご\"  \n```\n:::\n:::\n\n\n\nこんな風に、置き換えることができました!\n\nレベルも同様に、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] さん し   し   ご   いち に   ご  \nLevels: いち に さん し ご\n```\n:::\n\n```{.r .cell-code}\nlevels(vec2)[4] <- \"Four!\"\n\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] さん  Four! Four! ご    いち  に    ご   \nLevels: いち に さん Four! ご\n```\n:::\n:::\n\n\n\n置き換えることができました。\n\nまた、複数同時に置き換えたい場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp[c(2,5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"に\" \"ご\"\n```\n:::\n:::\n\n\n\nで別々の場所を指定できるので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ONE\"  \"に\"   \"さん\" \"し\"   \"ご\"  \n```\n:::\n\n```{.r .cell-code}\ntemp[c(2,4)] <- c(\"TWO\",\"FOUR\")\ntemp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ONE\"  \"TWO\"  \"さん\" \"FOUR\" \"ご\"  \n```\n:::\n:::\n\n\n\nを利用して、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] さん  Four! Four! ご    いち  に    ご   \nLevels: いち に さん Four! ご\n```\n:::\n\n```{.r .cell-code}\nlevels(vec2)[c(2,5)] <- c(\"Two\",\"Five\")\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] さん  Four! Four! Five  いち  Two   Five \nLevels: いち Two さん Four! Five\n```\n:::\n:::\n\n\n\nとすることが可能ですし、因子型にレベルを追加したい場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ONE\"  \"TWO\"  \"さん\" \"FOUR\" \"ご\"  \n```\n:::\n\n```{.r .cell-code}\ntemp <- c(temp,\"ろく\",\"なな\")\ntemp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ONE\"  \"TWO\"  \"さん\" \"FOUR\" \"ご\"   \"ろく\" \"なな\"\n```\n:::\n:::\n\n\n\nを利用して、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] さん  Four! Four! Five  いち  Two   Five \nLevels: いち Two さん Four! Five\n```\n:::\n\n```{.r .cell-code}\nlevels(vec2) <- c(levels(vec2), \"Six\",\"Seven\")\nlevels(vec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"いち\"  \"Two\"   \"さん\"  \"Four!\" \"Five\"  \"Six\"   \"Seven\"\n```\n:::\n\n```{.r .cell-code}\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] さん  Four! Four! Five  いち  Two   Five \nLevels: いち Two さん Four! Five Six Seven\n```\n:::\n:::\n\n\n\nとしてあげるとよいです。\n\nちょっと最後は駆け足でしたが、現時点では、\n\n * 位置を狙って複数置き換えられる\n * レベルを追加することもできる\n\nということを覚えていただいておく程度で問題ありません。\n\n次は因子型の対応表も指定して作成する方法を解説いたします。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}