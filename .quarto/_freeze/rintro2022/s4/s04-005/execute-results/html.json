{
  "hash": "316ddce6d50fadb8143848413b18cab7",
  "result": {
    "markdown": "---\ntitle: data.frame関数\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\nそれでは、スライドでお伝えしたことを実際にRで動かして見ていきましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n\nまずは文字列型のベクトルを作成しましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalcohol = c(\"週1日以内\",\"週4-6日\",\"週4-6日\",\"毎日\",\"のまない\",\"週1-3日\",\"毎日\")\n\nstr(alcohol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:7] \"週1日以内\" \"週4-6日\" \"週4-6日\" \"毎日\" \"のまない\" \"週1-3日\" ...\n```\n:::\n:::\n\n\n\nこのベクトルに含まれているものは文字列ですね？\n文字列を利用して表を作成した場合に、実はdata.frameとtibbleでは結果が違ってきます。\n\nやってみましょう、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_df <- data.frame(alcohol=alcohol)\ndat_ti <- tibble(alcohol=alcohol)\n\nstr(dat_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t7 obs. of  1 variable:\n $ alcohol: chr  \"週1日以内\" \"週4-6日\" \"週4-6日\" \"毎日\" ...\n```\n:::\n\n```{.r .cell-code}\nstr(dat_ti)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [7 × 1] (S3: tbl_df/tbl/data.frame)\n $ alcohol: chr [1:7] \"週1日以内\" \"週4-6日\" \"週4-6日\" \"毎日\" ...\n```\n:::\n:::\n\n\n\nstr関数で、作成したそれぞれの表の型をみてみると、data.frameの方はalcohol列がFactorと表示されている一方、tibbleの方はchrと表示されています。\n\n実は、data.frameで作成した表は、文字列が勝手に因子に置き換わってしまっています\n\nすこしヘルプファイルを見てみましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?data.frame\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n:::\n\n\n\n\n(*注：以下の`default.stringAsFactors()`は新しいRのVersionでは廃止されているため、うまく動きません)\nUsageの中の、stringsAsFactorsという設定がdefault.stringsAsFactors()となっており\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#default.stringsAsFactors()\n```\n:::\n\n\n\nTRUEになっています。\n\nstrings(文字列)As(を)Factors(因子に)というオプションがTRUEになっているため、data.frame関数は勝手に文字列を因子型に変換してしまいます。\n\nこの挙動、知らないと困るのは、例えば、間違って数値型に列を変換してしまったときに、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(alcohol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:7] \"週1日以内\" \"週4-6日\" \"週4-6日\" \"毎日\" \"のまない\" \"週1-3日\" ...\n```\n:::\n\n```{.r .cell-code}\nas.numeric(alcohol)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA NA NA NA NA NA NA\n```\n:::\n:::\n\n\n\n文字列型であれば数値型に変換できずエラーがでてしまうのですが、先のスライドでも解説したように、因子型は実態が数字とその対応表という形で保たれているイメージなので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(dat_df$alcohol)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA NA NA NA NA NA NA\n```\n:::\n:::\n\n\n\n数字型に変換できてしまいます！\n\nこの挙動、便利な反面、こまることが多いので、data.frame型を利用する場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_df2 <- data.frame(\n  alcohol=alcohol, \n  stringsAsFactors = FALSE\n)\n\nstr(dat_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t7 obs. of  1 variable:\n $ alcohol: chr  \"週1日以内\" \"週4-6日\" \"週4-6日\" \"毎日\" ...\n```\n:::\n:::\n\n\n\nこのように、stringAsFactorsのアーギュメントをFALSEとして作成する癖づけておくとよいと思います。\n\ntibble形式はこのようにかってに型を置き換えて表を作成したりはしないので、この設定を気にする必要はありません。このレクチャー以降は、原則tibbleで表を作成していきます。\n\nそれでは、次の動画では因子型を作成する方法について解説していきます。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}