{
  "hash": "71a373f43d4f685a78d51098fe9de0da",
  "result": {
    "markdown": "---\ntitle: graphics:関数を使ってグラフを描画する\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\nまず、この動画では、Rに最初から含まれているgraphicsパッケージを利用して、関数を使ってグラフを描画することを経験しましょう。\n\nまた、graphicsパッケージは「さっと」可視化するのに便利な機能なので、ここでご紹介する関数を覚えて置くと、将来役立つかもしれません。\n\n\nまずは、数字の推移を確認したいような場合\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1,3,5,4,3,\n         6,7,4,3,2,\n         5,6,7,9,10,\n         4,5,8,4,11,\n         13,12,15,12,11,\n         14,9,12)\n\nplot(vec)\n```\n\n::: {.cell-output-display}\n![](s04-002_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\nどうでしょうか？plot関数に数字を含むベクトルを与えてあげるだけで、こんなグラフが描画できました！\n\nまた、例えばvecに入っているのが、アイスクリームが売れた数だとして、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhiduke <- c(1:28)\n\ngraphics::barplot(vec, names.arg=hiduke)\n```\n\n::: {.cell-output-display}\n![](s04-002_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nx軸に日付を表示したり\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweekend <- rep(\n  c(rep(\"平日\",5),\"週末\",\"週末\"), 4\n)\n\nweekend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"平日\" \"平日\" \"平日\" \"平日\" \"平日\" \"週末\" \"週末\" \"平日\" \"平日\" \"平日\"\n[11] \"平日\" \"平日\" \"週末\" \"週末\" \"平日\" \"平日\" \"平日\" \"平日\" \"平日\" \"週末\"\n[21] \"週末\" \"平日\" \"平日\" \"平日\" \"平日\" \"平日\" \"週末\" \"週末\"\n```\n:::\n\n```{.r .cell-code}\nbarplot(vec, names.arg=hiduke, col=as.factor(weekend))\n```\n\n::: {.cell-output-display}\n![](s04-002_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n平日、週末を色分けしたりすることができます。このようにベクトルをグラフ表示をする関数に与えてあげると、グラフをうまく描いてくれるというイメージをここでしっかりと押さえておいてください\n\n他にも,例としては\n\ndotchart:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndotchart(log(islands, 10),\n         main = \"islands data: log10(area) (log10(sq. miles))\")\n```\n\n::: {.cell-output-display}\n![](s04-002_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndotchart(log(islands[order(islands)], 10),\n         main = \"islands data: log10(area) (log10(sq. miles))\")\n```\n\n::: {.cell-output-display}\n![](s04-002_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\n\nhist:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(islands)\n```\n\n::: {.cell-output-display}\n![](s04-002_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(sqrt(islands), breaks = 12, col = \"lightblue\", border = \"pink\")\n```\n\n::: {.cell-output-display}\n![](s04-002_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\n\nboxplot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(count ~ spray, data = InsectSprays, col = \"lightgray\")\n```\n\n::: {.cell-output-display}\n![](s04-002_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nboxplot(decrease ~ treatment, data = OrchardSprays, col = \"bisque\",\n        log = \"y\")\n```\n\n::: {.cell-output-display}\n![](s04-002_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n\n等、graphicsパッケージの各関数を利用すると、こんな感じでグラフを描くことができます\n\n(ここでお見せしたのは、ヘルプファイルの例の内容となります現時点では、この内容を理解している必要はありませんし、単純に、関数でグラフがかけるということを知っていただければこの動画の目的は達成しています。)\n\nそれでは次の動画からは、メインであるggplotを利用したグラフの作成方法を解説していきます\n\n",
    "supporting": [
      "s04-002_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}