{
  "hash": "4a19f7a6487b4e427da79061931e2f37",
  "result": {
    "markdown": "---\ntitle: 凡例の設定実践\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n Lec:--------\n\nここでは、凡例の内容の操作について解説していきます\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ngraph <- ggplot(diamonds) + geom_histogram(aes(x = price, fill = clarity))\ngraph\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\nまずは、スライドではでてきませんでしたが、凡例をけしてみましょう　guide = FALSEとすることで表示をなくすことができます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph + scale_fill_discrete(guide = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `guide` argument in `scale_*()` cannot be `FALSE`. This was deprecated in\nggplot2 3.3.4.\nℹ Please use \"none\" instead.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nguideは初期設定がTRUEで表示されるようになっているため特に指定しなければ消えないので安心してください。\n\n次にタイトルを変えてみましょうnameに変更したい文字列を与えてあげるだけでOKなので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngraph + scale_fill_discrete(name = \"透明度\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n\nかわりましたね?\n\n次に表示される順番を変えてみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?diamonds\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n:::\n\n\n\n一応、I1が最悪で、IFが最高の透明度らしいです。現状は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(diamonds$clarity)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   I1   SI2   SI1   VS2   VS1  VVS2  VVS1    IF \n  741  9194 13065 12258  8171  5066  3655  1790 \n```\n:::\n:::\n\n\n\nと、Ord.factor\n最悪から最高までの順番でちゃんとならんでおります\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(diamonds$clarity)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Ord.factor w/ 8 levels \"I1\"<\"SI2\"<\"SI1\"<..: 2 3 5 4 2 6 7 3 4 5 ...\n```\n:::\n:::\n\n\n\nをみてみると、実はこの変数、これまで解説していないOrd.factorという、因子型に順番が設定された変数となっております。\n\nLegendの表示順は原則アルファベット順なのですが、順番を指定した因子型にすると、順番通りに並べてくれるので、便利です。ただ、現状ではとりあえず、そんなものがあるんだなあくらいの認識でいてもらってよいかと思います。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nグラフの描画でもこの順番に上からならんでいます。ここでは、最高から最悪まで表示されるように順番を入れ替えてみましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_order <- c(\"IF\",\"VVS1\",\"VVS2\",\"VS1\",\"VS2\",\n               \"SI1\",\"SI2\",\"I1\") \n```\n:::\n\n\n\nこのnew_orderをscale_fill_discreteのbreaks に与えてみます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngraph + \n  scale_fill_discrete(breaks = new_order)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\n\n\nこんな感じでIFを一番上にすることに成功しました色合いが実はOrderedFactorそのままの場合と、順番を分けた場合に変化しています。本コースでは、基本的なところをお伝えする方針なため、色を個別に変更するところまでは踏み込みませんのでその点、ご了解いただけますと幸いです。\n\n最後に、Legendに表示される内容にラベルをつけてみましょう。\n\nダイヤモンドの透明度について知らないので、調べてみると、\n\n透明度とは、ダイヤモンドに含まれる微少な包有物\n\n* I1:含まれる \n* SI2:わずかに含まれる\n* SI1:わずかに含まれる\n* VS2:ほんのわずかに含まれる\n* VS1:ほんのわずかに含まれる\n* VVS2:ごくごくわずかに含有\n* VVS1:ごくごくわずかに含有\n* IF:内部が無傷\n\nという説明になっているので、ラベルをつけます\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(diamonds$clarity)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I1\"   \"SI2\"  \"SI1\"  \"VS2\"  \"VS1\"  \"VVS2\" \"VVS1\" \"IF\"  \n```\n:::\n:::\n\n\n\nで表示された順番に、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_label_of_clarity <- c(\"含まれる\",\n                           \"わずかにSI2\",\"わずかにSI1\",\n                           \"ほんのわずかにVS2\",\"ほんのわずかにVS1\",\n                           \"ごくごくわずかにVVS2\",\"ごくごくわずかにVVS1\",\n                           \"内部が無傷\")\n```\n:::\n\n\n\nという文字列ベクトルを作成してあげて、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngraph + scale_fill_discrete(labels = text_label_of_clarity)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\n\nとすることで、表示名も変更できました!\n\nここまで学んだ情報をまとめて記載すると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds) + \n  geom_histogram(aes(x = price, fill = clarity)) +\n  labs(title = \"値段と含有物のヒストグラム\", x = \"値段\", y = \"件数\") +\n  scale_fill_discrete(name = \"透明度\", \n                      labels = text_label_of_clarity)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](s04-018_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nこんなグラフがかけるようになりました！\n\nお疲れさまでした!\n次は演習問題を解いていきましょう。\n\n",
    "supporting": [
      "s04-018_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}