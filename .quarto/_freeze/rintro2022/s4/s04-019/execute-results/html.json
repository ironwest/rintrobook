{
  "hash": "c5b6e978a28b8f8f4b7a07b9bee3ece1",
  "result": {
    "markdown": "---\ntitle: 凡例の設定演習\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n凡例の設定のところでご紹介した新しい関数はscale_color_discreteと、scale_fill_discreteの二つですが、中身の設定がすこしごちゃごちゃしていたと思いますので、ここで演習問題を解きながら身に着けていきましょう。 \n\n \n利用するのはmsleepデータです、まず、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_graph <- ggplot(msleep) +\n  geom_point(aes(x=log(bodywt), y=log(brainwt), color=vore))\n\nbase_graph\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 27 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](s04-019_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nこのbase_graphがあるとして、これのラベルと凡例を「キレイ」にしてみてください。(尚、x軸、y軸ともに、log関数を理容して対数にしてあります。対数にしないと)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(msleep)+geom_point(aes(x=bodywt,y=brainwt))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 27 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](s04-019_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nこんな感じで左下に「ぐしゃっ」となるためです。\n\nでは、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_graph\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 27 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](s04-019_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nのタイトルを　体重と脳の重さの関係\n\n* x軸のラベルを　体重[log(kg)]\n* y軸のラベルを　脳の重さ[log(kg)]\n* 凡例のタイトルを　食性\n* 凡例のラベルをそれぞれ\n  * carni 肉食\n  * herbi 草食\n  * insecti 虫食\n  * onmi 雑食\n  * NA その他\n\nとして、carni insecti hrebi omni NAの順番に並び替えてみてください。\nそれでは、動画を止めてどうぞ。\n　\nできましたか?\n\nタイトルとラベルをまず設定するのはlabs関数、でしたね?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_graph +\n  labs(title = \"体重と脳の重さの関係\",\n       x = \"体重[log(kg)]\", y = \"脳の重さ[log(kg)]\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 27 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](s04-019_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nそれで、凡例を設定するためには、ここで、scale_color_discreteか、scale_fill_discreteのどちらかに設定を行ってあげる必要がありますがどちらを利用するか、判断できましたでしょうか？\n\n今回の場合は、base_graphは、\n```\nggplot(msleep) +\n geom_point(aes(x=log(bodywt), y=log(brainwt), color=vore))\n```\n\ncolor=voreと、colorを利用して凡例を描画\nしているため、次のようなスクリプトが正解になります\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_graph + \n  scale_color_discrete(\n    name=\"食性\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 27 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](s04-019_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nそれで、あとはラベルと並び順です。一応、NAが文字列のNAなのか欠損のNAなのかは確認したいので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(msleep$vore)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:83] \"carni\" \"omni\" \"herbi\" \"omni\" \"herbi\" \"herbi\" \"carni\" NA ...\n```\n:::\n\n```{.r .cell-code}\nsummary(msleep$vore)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Length     Class      Mode \n       83 character character \n```\n:::\n\n```{.r .cell-code}\nlevels(as.factor(msleep$vore))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"carni\"   \"herbi\"   \"insecti\" \"omni\"   \n```\n:::\n:::\n\n\n\nもともとのデータが文字列型で、本当に欠損しているみたいです。ggplotでは、文字列型は因子型と同様の扱いになってカテゴリー変数とみなされるため、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnarabi <- c(\"carni\",\"insecti\",\"herbi\",\"omni\", NA)\nhyouji <- c(\"肉食\",\"虫食\",\"草食\",\"雑食\",\"その他\")\n```\n:::\n\n\n\nここでnarabiのNAは\"NA\"でなくて、NAであることに注意しておいてください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n\"NA\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NA\"\n```\n:::\n:::\n\n\n\nは明確に違います。NAは欠損を表すもので\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(NA) #ロジカル型\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n logi NA\n```\n:::\n\n```{.r .cell-code}\nstr(\"NA\") #文字列型\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr \"NA\"\n```\n:::\n:::\n\n\n\nです。\n\nそれで、作成した変数を利用して、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_graph +\n  scale_color_discrete(\n    name = \"食性\",\n    breaks = narabi,\n    labels = hyouji\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 27 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](s04-019_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nとなります。\n\nいかがでしょうか？\n\nあともう1問やっておきましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- tibble(a=c(1,2,3),b=c(1,2,3),n=c(\"a\",\"b\",\"b\"))\n\nggplot(dat)+geom_col(aes(x=a,y=b,fill=n))\n```\n\n::: {.cell-output-display}\n![](s04-019_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\ngeom_colは初めてでてくるgeomですが、棒グラフを集計なしで作成するgeomです。geom_barだと、x軸の指定をすると勝手に集計してくれていましたが、geom_colはy軸の値の指定も必要です。\n\nこんなグラフ、凡例のタイトルをエヌ、凡例の並びをa->bではなく、b->aにして、aはエー、bはビーというラベルを付けてみてください。\n\n\n\n\n\n\n\n\n\n\n\nできましたか？\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dat)+\n  geom_col(aes(x=a,y=b,fill=n)) +\n  scale_fill_discrete(\n    name=\"エヌ\",\n    breaks=c(\"b\",\"a\"),\n    labels=c(\"ビー\",\"エー\")\n  )\n```\n\n::: {.cell-output-display}\n![](s04-019_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nこんな感じで自分でデータを作って関数の動きを確認できるようになると、学習速度が上がることと、将来、関数を作成した時に意図した通りに動くかの確認をしたりするときに非常に役立つのですきをみて取り組んでみてください。\n\nそれでは、次はggplotの基礎の最後、テーマの設定について解説していきます。\n\n",
    "supporting": [
      "s04-019_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}