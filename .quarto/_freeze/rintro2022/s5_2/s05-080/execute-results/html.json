{
  "hash": "074215feb79e1bd9705316313f13f53e",
  "result": {
    "markdown": "---\ntitle: 人口動態統計データの加工3\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndat <- read_csv(\n  file = \"data/mc360000.csv\", \n  locale=locale(encoding=\"shift-jis\"),\n  skip = 3, \n  col_names = FALSE\n)\n\nrow1 <- dat %>% slice(1) %>% as_vector()\nrow2 <- dat %>% slice(2) %>% as_vector()\nrow3 <- dat %>% slice(3) %>% as_vector()\n\ndat_colname <- tibble(\n  r1 = row1,\n  r2 = row2,\n  r3 = row3\n)\n\ndat_colname <- dat_colname %>% fill(r1,r2,r3,.direction=\"down\")\ndat_colname2 <- dat_colname %>% unite(col = \"coln\", r1, r2, r3,sep=\"_\", remove=FALSE)\nvec_coln <- dat_colname2 %>% pull(coln)\ndat2 <- dat %>% setNames(vec_coln)\ndat3 <- dat2 %>% slice(-(1:4))\ndat4 <- dat3 %>% rename(cause = NA_NA_NA)\n```\n:::\n\n\n\nもう少しです。cause列、[X数字　説明]という形になっているため、これは二つに分けておきます。\n\n区切られている文字をしらべてきます\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view_all(dat4$cause[1:3],\" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `str_view()` was deprecated in stringr 1.5.0.\nℹ Please use `str_view_all()` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ X60{\\u3000\\u3000\\u3000}非オピオイド系鎮痛薬，解熱薬及び抗リウマチ薬\n[2] │ X61{\\u3000\\u3000\\u3000}抗てんかん薬，鎮静・催眠薬，パーキンソン病治療薬及び向精神薬\n[3] │ X62{\\u3000\\u3000\\u3000}麻薬及び精神変容薬[幻覚発現薬]\n```\n:::\n\n```{.r .cell-code}\nstr_view_all(dat4$cause[1:3],\"　\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ X60<{\\u3000}><{\\u3000}><{\\u3000}>非オピオイド系鎮痛薬，解熱薬及び抗リウマチ薬\n[2] │ X61<{\\u3000}><{\\u3000}><{\\u3000}>抗てんかん薬，鎮静・催眠薬，パーキンソン病治療薬及び向精神薬\n[3] │ X62<{\\u3000}><{\\u3000}><{\\u3000}>麻薬及び精神変容薬[幻覚発現薬]\n```\n:::\n:::\n\n\n\nどうやら全角文字のようなので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 <- dat4 %>% \n  separate(cause, c(\"id\",\"name\"), sep=\"　+\")\n  \nView(dat5)\n```\n:::\n\n\n\n準備がととのいました!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat6 <- dat5 %>% \n  pivot_longer(\n    cols = !c(id,name),\n    names_to = c(\"sex\",\"type\",\"year\"),\n    values_to = \"val\",\n    names_sep = \"_\"\n  )\n\nView(dat6)\n```\n:::\n\n\n\nほとんどtidyです\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(dat6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [1,500 × 6] (S3: tbl_df/tbl/data.frame)\n $ id  : chr [1:1500] \"X60\" \"X60\" \"X60\" \"X60\" ...\n $ name: chr [1:1500] \"非オピオイド系鎮痛薬，解熱薬及び抗リウマチ薬\" \"非オピオイド系鎮痛薬，解熱薬及び抗リウマチ薬\" \"非オピオイド系鎮痛薬，解熱薬及び抗リウマチ薬\" \"非オピオイド系鎮痛薬，解熱薬及び抗リウマチ薬\" ...\n $ sex : chr [1:1500] \"総数\" \"総数\" \"総数\" \"総数\" ...\n $ type: chr [1:1500] \"死亡数\" \"死亡数\" \"死亡数\" \"死亡数\" ...\n $ year: chr [1:1500] \"1995\" \"2000\" \"2005\" \"2010\" ...\n $ val : chr [1:1500] \"8\" \"10\" \"7\" \"8\" ...\n```\n:::\n:::\n\n\n\nyearとvalを数値型に変換しておきましょう。また、valは未測定は「-」で記入されているのでそこは欠損値にしておきます（わざわざ変換しなくても、NAに-は勝手におきかわりますが、警告がでるのも気持ち悪いので手動で変換しておきましょう。）\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat7 <- dat6 %>% \n  mutate(year = as.numeric(year),\n          val = val %>% na_if(\"-\") %>% as.numeric())\n\nView(dat7)\n```\n:::\n\n\n\n総数がsexに含まれているは気持ち悪いのでこれも消しておきましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat8 <- dat7 %>% \n  filter(sex != \"総数\")\n```\n:::\n\n\n\n以上、ここまでの処理で、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(dat)\n```\n:::\n\n\n\nが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(dat7)\n```\n:::\n\n\n\nになった結果、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdat <- dat8 %>% \n  filter(type == \"死亡数\") %>% \n  filter(id == \"X60\")\ntitle <- gdat$name[1]\n\nggplot(gdat) + \n  geom_col(aes(x = year, y = val, fill = sex)) +\n  facet_wrap(~sex) +\n  labs(title = title)\n```\n\n::: {.cell-output-display}\n![](s05-080_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nと、こんな感じでグラフを簡単に描画できました。\n\n他にもdistinct関数を利用すると\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat8 %>% \n  select(id, name) %>% \n  distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 × 2\n   id    name                                                        \n   <chr> <chr>                                                       \n 1 X60   非オピオイド系鎮痛薬，解熱薬及び抗リウマチ薬                \n 2 X61   抗てんかん薬，鎮静・催眠薬，パーキンソン病治療薬及び向精神薬\n 3 X62   麻薬及び精神変容薬[幻覚発現薬]                              \n 4 X63   自律神経系に作用するその他の薬物                            \n 5 X64   その他及び詳細不明の薬物，薬剤及び生物学的製剤              \n 6 X65   アルコール                                                  \n 7 X66   有機溶剤及びハロゲン化炭化水素類及びそれらの蒸気            \n 8 X67   その他のガス及び蒸気                                        \n 9 X68   農薬                                                        \n10 X69   その他及び詳細不明の化学物質及び有害物質                    \n# ℹ 15 more rows\n```\n:::\n:::\n\n\n\nこんな感じで集計することができます。\n\n薬剤関係でX60,X61,X62,X63の4つのidを絞り込んで描画するのであれば、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdat <- dat8 %>% \n  filter(type == \"死亡数\") %>% \n  filter(id %in% c(\"X60\",\"X61\",\"X62\",\"X63\"))\n\nggplot(gdat) +\n  geom_col(aes(x = year, y = val, fill = sex)) +\n  facet_wrap(~name)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 23 rows containing missing values (`position_stack()`).\n```\n:::\n\n::: {.cell-output-display}\n![](s05-080_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nというグラフを作成することもできます。\n\n尚、%in%　という表記をはじめて利用しましたが、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3, 1, 2, 3, 4, 5, 1) %in% c(2, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n\nこんな感じで、左側のベクトルに対して、右側のベクトルに含まれているかそうでないかという条件でロジカルベクトルを作成することができます。\n\nこれを、filterの中で利用すれば、複数の条件で絞り込むことが簡単にできます。\n\n次はここで学んだ智識を使って、食中毒データの処理を行いましょう。",
    "supporting": [
      "s05-080_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}