{
  "hash": "d7ba07632079dda73373553927fe045c",
  "result": {
    "markdown": "---\ntitle: 人口動態統計データの加工2\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndat <- read_csv(\n  file = \"data/mc360000.csv\", \n  locale=locale(encoding=\"shift-jis\"),\n  skip = 3, \n  col_names = FALSE\n)\n```\n:::\n\n\n\nここでは、列名を作成することを考えます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(dat)\n```\n:::\n\n\n\nデータを眺めると、\n\n1行目　総数    NA    ... NA     NA   ...\n2行目　死亡数  NA    ... 百分率 NA   ...\n3行目　1995　　2000　... 1995   2000 ...\n\nと、こんな感じで、1行目から3行目までで合わせて列のような形です。\n\nこれを\n\n1行目　総数    総数   ...\n2行目　死亡数  死亡数 ...\n3行目　1995　　2000　 ...\n\nとして、\n\n総数_死亡数_1995 | 総数_死亡数_2000 | ...\n\nというような形の列名にすることができれば、pivot_longerで処理をまとめてできそうです。\n\nここで1行ずつ抜き出してベクトルに変換しましょう。\n\n1行を抜き出すには、slice関数を利用するか、\n\ndata[1,]\n\nの書き方を利用します\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow1 <- dat %>% slice(1)\nrow1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 61\n  X1    X2    X3    X4    X5    X6    X7    X8    X9    X10   X11   X12   X13  \n  <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n1 <NA>  総数  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n# ℹ 48 more variables: X14 <chr>, X15 <chr>, X16 <chr>, X17 <chr>, X18 <chr>,\n#   X19 <chr>, X20 <chr>, X21 <chr>, X22 <chr>, X23 <chr>, X24 <chr>,\n#   X25 <chr>, X26 <chr>, X27 <chr>, X28 <chr>, X29 <chr>, X30 <chr>,\n#   X31 <chr>, X32 <chr>, X33 <chr>, X34 <chr>, X35 <chr>, X36 <chr>,\n#   X37 <chr>, X38 <chr>, X39 <chr>, X40 <chr>, X41 <chr>, X42 <chr>,\n#   X43 <chr>, X44 <chr>, X45 <chr>, X46 <chr>, X47 <chr>, X48 <chr>,\n#   X49 <chr>, X50 <chr>, X51 <chr>, X52 <chr>, X53 <chr>, X54 <chr>, …\n```\n:::\n\n```{.r .cell-code}\nrow1 <- dat[1,]\nrow1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 61\n  X1    X2    X3    X4    X5    X6    X7    X8    X9    X10   X11   X12   X13  \n  <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n1 <NA>  総数  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n# ℹ 48 more variables: X14 <chr>, X15 <chr>, X16 <chr>, X17 <chr>, X18 <chr>,\n#   X19 <chr>, X20 <chr>, X21 <chr>, X22 <chr>, X23 <chr>, X24 <chr>,\n#   X25 <chr>, X26 <chr>, X27 <chr>, X28 <chr>, X29 <chr>, X30 <chr>,\n#   X31 <chr>, X32 <chr>, X33 <chr>, X34 <chr>, X35 <chr>, X36 <chr>,\n#   X37 <chr>, X38 <chr>, X39 <chr>, X40 <chr>, X41 <chr>, X42 <chr>,\n#   X43 <chr>, X44 <chr>, X45 <chr>, X46 <chr>, X47 <chr>, X48 <chr>,\n#   X49 <chr>, X50 <chr>, X51 <chr>, X52 <chr>, X53 <chr>, X54 <chr>, …\n```\n:::\n:::\n\n\n\nそれで、これをベクトルに変換したいのですがそれは、as_vector()でできます\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_vector(row1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X1     X2     X3     X4     X5     X6     X7     X8     X9    X10    X11 \n    NA \"総数\"     NA     NA     NA     NA     NA     NA     NA     NA     NA \n   X12    X13    X14    X15    X16    X17    X18    X19    X20    X21    X22 \n    NA     NA     NA     NA     NA     NA     NA     NA     NA     NA   \"男\" \n   X23    X24    X25    X26    X27    X28    X29    X30    X31    X32    X33 \n    NA     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA \n   X34    X35    X36    X37    X38    X39    X40    X41    X42    X43    X44 \n    NA     NA     NA     NA     NA     NA     NA     NA   \"女\"     NA     NA \n   X45    X46    X47    X48    X49    X50    X51    X52    X53    X54    X55 \n    NA     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA \n   X56    X57    X58    X59    X60    X61 \n    NA     NA     NA     NA     NA     NA \n```\n:::\n:::\n\n\n\nということで、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow1 <- dat %>% slice(1) %>% as_vector()\nrow2 <- dat %>% slice(2) %>% as_vector()\nrow3 <- dat %>% slice(3) %>% as_vector()\n\ndat_colname <- tibble(\n  r1 = row1,\n  r2 = row2,\n  r3 = row3\n)\n\ndat_colname\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 61 × 3\n   r1    r2     r3   \n   <chr> <chr>  <chr>\n 1 <NA>  <NA>   <NA> \n 2 総数  死亡数 1995 \n 3 <NA>  <NA>   2000 \n 4 <NA>  <NA>   2005 \n 5 <NA>  <NA>   2010 \n 6 <NA>  <NA>   2014 \n 7 <NA>  <NA>   2015 \n 8 <NA>  <NA>   2016 \n 9 <NA>  <NA>   2017 \n10 <NA>  <NA>   2018 \n# ℹ 51 more rows\n```\n:::\n:::\n\n\n\nこのデータから列名をつくります。\n\nまず、欠損値をうめます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_colname <- dat_colname %>% \n  fill(r1,r2,r3,.direction=\"down\")\n\ndat_colname\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 61 × 3\n   r1    r2     r3   \n   <chr> <chr>  <chr>\n 1 <NA>  <NA>   <NA> \n 2 総数  死亡数 1995 \n 3 総数  死亡数 2000 \n 4 総数  死亡数 2005 \n 5 総数  死亡数 2010 \n 6 総数  死亡数 2014 \n 7 総数  死亡数 2015 \n 8 総数  死亡数 2016 \n 9 総数  死亡数 2017 \n10 総数  死亡数 2018 \n# ℹ 51 more rows\n```\n:::\n:::\n\n\n\nそして、separate関数の反対の動作をする関数があるのでそれを利用していましょう。uniteです。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_colname2 <- dat_colname %>% \n  unite(col = \"coln\", r1, r2, r3,sep=\"_\", remove=FALSE)\n\nView(dat_colname2)\n```\n:::\n\n\n\nこの作成したcoln列をベクトルとしてとりだして、datの列名にしてあげればよいです\n\nベクトルとして列を取り出す場合は、pull()を使います。また、setNames関数で文字ベクトルを一括して表の列名にしていできます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_coln <- dat_colname2 %>% \n  pull(coln)\n\nvec_coln\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"NA_NA_NA\"         \"総数_死亡数_1995\" \"総数_死亡数_2000\" \"総数_死亡数_2005\"\n [5] \"総数_死亡数_2010\" \"総数_死亡数_2014\" \"総数_死亡数_2015\" \"総数_死亡数_2016\"\n [9] \"総数_死亡数_2017\" \"総数_死亡数_2018\" \"総数_死亡数_2019\" \"総数_百分率_1995\"\n[13] \"総数_百分率_2000\" \"総数_百分率_2005\" \"総数_百分率_2010\" \"総数_百分率_2014\"\n[17] \"総数_百分率_2015\" \"総数_百分率_2016\" \"総数_百分率_2017\" \"総数_百分率_2018\"\n[21] \"総数_百分率_2019\" \"男_死亡数_1995\"   \"男_死亡数_2000\"   \"男_死亡数_2005\"  \n[25] \"男_死亡数_2010\"   \"男_死亡数_2014\"   \"男_死亡数_2015\"   \"男_死亡数_2016\"  \n[29] \"男_死亡数_2017\"   \"男_死亡数_2018\"   \"男_死亡数_2019\"   \"男_百分率_1995\"  \n[33] \"男_百分率_2000\"   \"男_百分率_2005\"   \"男_百分率_2010\"   \"男_百分率_2014\"  \n[37] \"男_百分率_2015\"   \"男_百分率_2016\"   \"男_百分率_2017\"   \"男_百分率_2018\"  \n[41] \"男_百分率_2019\"   \"女_死亡数_1995\"   \"女_死亡数_2000\"   \"女_死亡数_2005\"  \n[45] \"女_死亡数_2010\"   \"女_死亡数_2014\"   \"女_死亡数_2015\"   \"女_死亡数_2016\"  \n[49] \"女_死亡数_2017\"   \"女_死亡数_2018\"   \"女_死亡数_2019\"   \"女_百分率_1995\"  \n[53] \"女_百分率_2000\"   \"女_百分率_2005\"   \"女_百分率_2010\"   \"女_百分率_2014\"  \n[57] \"女_百分率_2015\"   \"女_百分率_2016\"   \"女_百分率_2017\"   \"女_百分率_2018\"  \n[61] \"女_百分率_2019\"  \n```\n:::\n\n```{.r .cell-code}\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 61\n   X1    X2    X3    X4    X5    X6    X7    X8    X9    X10   X11   X12   X13  \n   <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n 1 <NA>  総数  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 2 <NA>  死亡… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  百分… <NA> \n 3 <NA>  1995  2000  2005  2010  2014  2015  2016  2017  2018  2019  1995  2000 \n 4 X60-… 21420 30251 30553 29554 24417 23152 21021 20468 20031 19425 100   100  \n 5 X60…  8     10    7     8     7     6     5     4     4     10    0     0    \n 6 X61…  235   359   375   307   240   200   191   148   170   162   1.1   1.2  \n 7 X62…  -     1     3     -     2     1     2     2     1     -     -     0    \n 8 X63…  1     1     3     -     2     3     -     -     -     -     0     0    \n 9 X64…  111   164   197   187   158   176   165   162   161   151   0.5   0.5  \n10 X65…  1     4     5     4     10    3     6     3     4     3     0     0    \n# ℹ 19 more rows\n# ℹ 48 more variables: X14 <chr>, X15 <chr>, X16 <chr>, X17 <chr>, X18 <chr>,\n#   X19 <chr>, X20 <chr>, X21 <chr>, X22 <chr>, X23 <chr>, X24 <chr>,\n#   X25 <chr>, X26 <chr>, X27 <chr>, X28 <chr>, X29 <chr>, X30 <chr>,\n#   X31 <chr>, X32 <chr>, X33 <chr>, X34 <chr>, X35 <chr>, X36 <chr>,\n#   X37 <chr>, X38 <chr>, X39 <chr>, X40 <chr>, X41 <chr>, X42 <chr>,\n#   X43 <chr>, X44 <chr>, X45 <chr>, X46 <chr>, X47 <chr>, X48 <chr>, …\n```\n:::\n:::\n\n\n\nちょうど、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(vec_coln)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 61\n```\n:::\n\n```{.r .cell-code}\nncol(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 61\n```\n:::\n:::\n\n\n\nベクトルの長さと列数が一致していますね?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2 <- dat %>% setNames(vec_coln)\n\nView(dat2)\n```\n:::\n\n\n\nうまくいきました。これで、最初の3行は必要ないので、消しましょう。あと、4行目、X60-X84 総数 に該当する行の消しておきます(個別のデータのみにしたい状況としておきまｓ)slice関数は、中の数字に―をつけると削除するという意味になるので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 <- dat2 %>% \n  slice(-(1:4))\n\nView(dat3)\n```\n:::\n\n\n\nいかがでしょうか?\n\nNA_NA_NAという列名はきになるので適当に変えておきましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat4 <- dat3 %>% \n  rename(cause = NA_NA_NA)\n\nView(dat4)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}