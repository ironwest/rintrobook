{
  "hash": "de95ebf1597d81fa9721f695533a815a",
  "result": {
    "markdown": "---\ntitle: 関数(ヘルプファイルの読み方1)(L33)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\nスライドでは、関数に与えるものとして\n\n`美容院(\"髪の長さ:20cm\",paama=TRUE,color=\"gold\",length=2)`\n\nとして、\"髪の長さ:20cm\"を入力、paama=TRUE,color=\"gold\",length=2をオプションと呼んでいましたが、実はこのような呼び方は本来しません。\n\n入力やオプションの区別をつけず、すべて、\n\n* 引数(ひきすう)　や\n* Argument\n\nと呼びます。\n\nArgumentという言葉が使われていることを確認するために、関数のヘルプファイルを見てみましょう。\n\nヘルプファイルは関数の使い方を解説してくれている文書で、新しい関数を使うときには、まず真っ先に見るものとなります\n\nヘルプファイルの見かたは簡単で、例えば与えた数字を全部足してくれる、sum関数のヘルプファイルを見る場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?sum\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n:::\n\n\n\n?をつけて、カッコなしの関数を記載して実行するだけです。英語の文書となりますが、がんばって読みましょう。なれれば、楽に読めるようになります。\n\n\nヘルプファイルの項目として\n\n* Description\n* Usage \n* Arguments\n* Details\n* Examples\n　\nの4つは最低限目を通しておくと関数の働きがわかりやすくなります\n\n### Description\n\nその関数が何をする関数なのかの説明があります\n\n`sum` returns the sum of all the values present in its arguments.\n\nとあるので、\n\nsumのargumentにあるものの全ての和を返す\n\nと記載されています。\n\n### Usage\n\nどのように利用するかの記載があります\n\n`sum(..., na.rm = FALSE)`\n\nという使い方で、\n\n### Arguments\n\nUsageでしめされている、sum関数の中身についてそれぞれ記載されています。\n\n* ...\t :  numeric or complex or logical vectors.\n* na.rm:\tlogical. Should missing values (including NaN) be removed?\n\n### Details\n\nより詳しくArgumentsの内容や注意が書かれています。読み飛ばしたりなんとなくの理解で構わないと思います。\n\n### Examples\n\n最後になりましたが、一番大切なのがExamplesだと個人的には思っています。\n\nここに書いてあるスクリプトはそのまま実行すると、関数がどのような動作をするか、なんとなくイメージできるようになります。\n\n次の動画で、このExamplesの動作を確認しながら、sum関数がどのような挙動を示すのか、Argumentsに与えられたものが何を示すのか、解説していきます。\n",
    "supporting": [
      "s02-028_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}