{
  "hash": "a0aa8be38554432af53bdf91539e695a",
  "result": {
    "markdown": "---\ntitle: ベクトル(作り方)(L19)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\nそれでは、ベクトルを作って見ましょう！\n\nベクトルをつくるには、「combine（くっつける）」の頭文字である、c()を使います。\n\n\n例：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3,4,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n\n実行すると、コンソール画面に入力した数字がでてますか？\n\n`[1] 1 2 3 4 5`\n\nこれがベクトルです。\n\n\nベクトルは変数に収納することもできます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1,2,3,4,5)\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n\nこれでベクトルの作成ができるようになりました！\n\n他にも色々と実験してみます。文字列をいれてみましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(\"あ\",\"い\",\"う\",\"え\",\"お\")\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"あ\" \"い\" \"う\" \"え\" \"お\"\n```\n:::\n:::\n\n\n\n文字列が入りましたね。\n\n\n文字列が入っている場合は\"\"ダブルクオーテーションで囲まれる\nことに注意しておいてください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c( 1 , 2 , 3 , 4 , 5 )\nb <- c(\"1\",\"2\",\"3\",\"4\",\"5\")\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n```\n:::\n:::\n\n\n\nちょっと実験してみましょう。\n次の結果はどうなるでしょうか？\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1,2,3,4,\"あ\")\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"  \"2\"  \"3\"  \"4\"  \"あ\"\n```\n:::\n:::\n\n\n\n全て、文字列型になっていますね？\nこのように、文字列型が数字の中に混ざっていると、\n\n`[1] \"1\" \"2\" \"3\" \"4\" \"あ\"`\n\nと、「全て」文字列型に置き換わってしまいます。\n\nということで、この動画では、\n\n* combineのcを利用してベクトルを作ることができる\n* 異なる種類の型を一つのベクトルの中で混ぜることはできない\n\nの2点をしっかりと押さえておいてください。 \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}