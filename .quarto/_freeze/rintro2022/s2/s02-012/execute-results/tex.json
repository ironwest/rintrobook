{
  "hash": "19bc92b4cf377e2336fb51b786a70cdd",
  "result": {
    "markdown": "---\ntitle: rm関数(L17)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\n\nrm関数の使い型を見ていきましょう。この動画までは、rm　str等のことを「命令」と意図的に呼んできましたが、本当は、rm() str()のように、カッコがついて、\nカッコの中身に対して何か作用するもののことをRでは関数と呼びます\n(あるいは、英語で関数を意味するfunctionです。)\n\nこの関数、後ほど説明しますが、色々な命令を与えることができます。\n\n命令の与え方として`list=ls()`としてあげると、全部を消すことができます。\n\nやってみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhako1 <- 3\nhako2 <- 4\nhako3 <- 5\nhako4 <- 6\nhako5 <- 7\n```\n:::\n\n\n\nこんな感じで5個の変数があったとすると、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hako1\"           \"hako2\"           \"hako3\"           \"hako4\"          \n[5] \"hako5\"           \"has_annotations\"\n```\n:::\n:::\n\n\n\nls関数で、作成された変数の名前をすべて呼び出すことができます。\nこれを利用して、rmのlistの命令の部分に、ls()を使うと、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list=ls()) \n```\n:::\n\n\n\n変数を全部消すことができました。\n\n次は、型の変換について説明していきます。",
    "supporting": [
      "s02-012_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}