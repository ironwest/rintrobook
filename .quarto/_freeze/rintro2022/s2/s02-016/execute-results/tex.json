{
  "hash": "aa9f917d485eaa8121b6d7663aabb470",
  "result": {
    "markdown": "---\ntitle: ベクトル(ベクトル同士の計算)(L21)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n\n\nここでは、ベクトル同士の計算について解説していきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1,2,3,4,5)\n\na + 10　\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11 12 13 14 15\n```\n:::\n:::\n\n\n\nものすごく基本的な事項ですが、\n　\nプラス　+　は足し算を表します。\n\nこのように、ベクトルに対して、数字を一つ足すと、ベクトルに含まれる数字すべてに対して同じ計算が行われました。\n　\nこれからは、「ベクトルに含まれる数字」のことを「要素」とよびます。\n　\n一般的な計算は、次の通りで、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na + 10  # + は足し算\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11 12 13 14 15\n```\n:::\n\n```{.r .cell-code}\na - 5   # - は引き算\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -4 -3 -2 -1  0\n```\n:::\n\n```{.r .cell-code}\na * 5 　# * はかけ算\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5 10 15 20 25\n```\n:::\n\n```{.r .cell-code}\na / 10  # / は割り算\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1 0.2 0.3 0.4 0.5\n```\n:::\n\n```{.r .cell-code}\na ** 2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n\n```{.r .cell-code}\na ^ 2   # **　と ^ は塁乗\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n\n```{.r .cell-code}\na %% 2  # %%  は割り算の余り\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0 1 0 1\n```\n:::\n\n```{.r .cell-code}\na %/% 2 # %/% は割り算の商\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 1 2 2\n```\n:::\n:::\n\n\n\nを表します\n\nちょっと記号がたくさんでてきてごちゃごちゃしますが、つかっているうちになれるはずです。\n\n\nここで、新しいベクトルを作ってみましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- c(10,11,12,13,14)\n```\n:::\n\n\n\nこれまで　ベクトルと数字の計算を実行してきましたが、ベクトル同士で計算を行ったらどうなるでしょうか？\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 11 12 13 14\n```\n:::\n\n```{.r .cell-code}\na + b \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11 13 15 17 19\n```\n:::\n:::\n\n\n\nこんな結果になりました。\n```\n\n a  :  1  2  3  4  5\n b  : 10 11 12 13 14\n a+b: 11 13 15 17 19\n```\n\nどういう計算が行われたか、わかりますか？\n\nベクトル同士の計算を行った場合は、同じ位置同士での計算が行われる形になっています。なので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na + b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11 13 15 17 19\n```\n:::\n\n```{.r .cell-code}\na * b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 22 36 52 70\n```\n:::\n\n```{.r .cell-code}\na - b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -9 -9 -9 -9 -9\n```\n:::\n\n```{.r .cell-code}\na / b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1000000 0.1818182 0.2500000 0.3076923 0.3571429\n```\n:::\n\n```{.r .cell-code}\nb ** a \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]     10    121   1728  28561 537824\n```\n:::\n\n```{.r .cell-code}\nb %% a \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 0 1 4\n```\n:::\n\n```{.r .cell-code}\nb %/% a \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10  5  4  3  2\n```\n:::\n:::\n\n\n\nいかがでしょう？\n\n同じ位置同士の計算が行われるイメージができましたか？\n\n\nスライドの解説では、一般的な表形式のデータの1本の列がベクトルでRでは表されていると解説いたしました。\n\n今回、お示しした計算を組み合わせることで、いろいろな加工がデータに対してできます。\n",
    "supporting": [
      "s02-016_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}