{
  "hash": "03276ba8e09189016758e13b682e3773",
  "result": {
    "markdown": "---\ntitle: duration(sld100)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\n```\n:::\n\n\n\nひとつ前の動画では、時刻と時刻の差、difftimeが、長さによって分や時間や日という単位に変わってしまい、計算結果の単位が合わなくて困るという話をしました。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\n\nt1 <- as_datetime(0)\nt2 <- as_datetime(59)\nt3 <- as_datetime(61)\n\nm2 <- t2-t1\nm3 <- t3-t1\n\nm2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 59 secs\n```\n:::\n\n```{.r .cell-code}\nm3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1.016667 mins\n```\n:::\n\n```{.r .cell-code}\nas.numeric(m2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 59\n```\n:::\n\n```{.r .cell-code}\nas.numeric(m3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.016667\n```\n:::\n:::\n\n\n\nこのdifftimeの困りごとを解消するためにはlubridateのDuration クラスを利用しましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndur2 <- as.duration(m2)\ndur3 <- as.duration(m3)\n\ndur2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"59s\"\n```\n:::\n\n```{.r .cell-code}\ndur3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"61s (~1.02 minutes)\"\n```\n:::\n\n```{.r .cell-code}\nas.numeric(dur2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 59\n```\n:::\n\n```{.r .cell-code}\nas.numeric(dur3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 61\n```\n:::\n:::\n\n\n\nいかがでしょうか?durationの表示は秒と分両方で記載されています。そしてas.numericで数字に変換した場合にdifftimeは単位がばらついた結果になっていましたが、durationは数字になってかつ、単位も秒で統一されていますね\n\n日付型もみてみましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndy1 <- as_date(0)\ndy2 <- as_date(100)\ndy3 <- as_date(1000)\n\ndur2 <- dy2 -dy1\ndur3 <- dy3 -dy1\n\nas.duration(dur2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"8640000s (~14.29 weeks)\"\n```\n:::\n\n```{.r .cell-code}\nas.duration(dur3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"86400000s (~2.74 years)\"\n```\n:::\n:::\n\n\n\nはい。この通り、やはり秒で表示されており、()の中に、週であったり年であったりが表示されています\n\ndurationを利用することで秒で統一的に時刻や日付の差を計算することができます。\n\nこのduration、lubridateに用意されている関数で「経過時間」を作成することができます。\n\nちょっとやってみましょう。\n\n例えば、\n\n2020年12月30日の朝9時の24時間後の時刻を計算してみます。「24時間」をduration型で作成するには\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhr24 <- lubridate::dhours(24)\nhr24\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"86400s (~1 days)\"\n```\n:::\n:::\n\n\n\nこのようにdhoursを利用します。\n\nlubridate::dと検索すると、dmonth dyear dminutes 等のdurationを作成するための関数がありますので必要に応じて利用してください。それで、このhr24を、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1 <- as_datetime(\"2019-3-1 09:00:00\")\n```\n:::\n\n\n\nt1に足してあげましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1 + hr24\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2019-03-02 09:00:00 UTC\"\n```\n:::\n:::\n\n\n\n24時間後の時刻になっていますね?\n\nこのように、好きな時間をdurationで作成して時刻に対して足すことで「時間をすすめること」ができます。\n\n日付型でもやってみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndy1 <- as_date(\"2020-2-20\")\n\ndy1 + ddays(5) #無事、5日後の日付になっていますね?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-02-25\"\n```\n:::\n:::\n\n\n\nこれ1か月後とかもできるんですが・・・\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndy1 + dmonths(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-03-21 10:30:00 UTC\"\n```\n:::\n:::\n\n\n\n??? なぜか日付ではなく時刻になっています。\n\n実は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndmonths(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2629800s (~4.35 weeks)\"\n```\n:::\n:::\n\n\n\nは、4.35週間ときっちり「カレンダー上の1か月」ではありません\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndyears(1)/12\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2629800s (~4.35 weeks)\"\n```\n:::\n:::\n\n\n\n1年の長さを単純に12分の1にしただけなので、カレンダー上の1か月後という意味では間違いとなってしまいます。\n\nちなみに、計算してみると\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(months(1)) #秒\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2629800\n```\n:::\n\n```{.r .cell-code}\nas.numeric(months(1))/60 #分\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 43830\n```\n:::\n\n```{.r .cell-code}\nas.numeric(months(1))/60/60 #時間\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 730.5\n```\n:::\n\n```{.r .cell-code}\nas.numeric(months(1))/60/60/24 #日\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30.4375\n```\n:::\n:::\n\n\n\nということで30.4375日、物理的な時間を進めるのが、\n\n + dmonths(1)\n\nという処理になります。\n\n以上、durationについての説明でした。\n\n物理的に経過した時間を計算するためには、このdurationは非常に便利です。ただし、月や年等をカレンダーで考えたい場合は、durationを使いづらいので、次はカレンダーの数値を変更する感覚で計算できる、periodについて解説していきます。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}