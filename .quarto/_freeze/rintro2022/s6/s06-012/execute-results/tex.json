{
  "hash": "50c72c4ea1112244df8d9efb6548a4e1",
  "result": {
    "markdown": "---\ntitle: 全体集計の実践(tidyverse)応用3-across\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nそれでは、スライドで解説したacross関数を、実際にRで実行してみます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- tibble(\n  a1 = c(12,13,14),\n  b1 = c(1,2,3),\n  a2 = c(3.22345, 3.542352345, 4.4235235)\n)\n\ntest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n     a1    b1    a2\n  <dbl> <dbl> <dbl>\n1    12     1  3.22\n2    13     2  3.54\n3    14     3  4.42\n```\n:::\n:::\n\n\n\nこんなデータがあるとして、\n\n全部の列を100倍する:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest %>% mutate( across(.cols=everything(), .fns = ~{. * 100}) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n     a1    b1    a2\n  <dbl> <dbl> <dbl>\n1  1200   100  322.\n2  1300   200  354.\n3  1400   300  442.\n```\n:::\n:::\n\n\n\nどうでしょうか?mutate関数の中で、acrossを利用して、そのacrossのargumentsに、.colsはeverything()、　.fnsは~{}で無名関数を作成して、その中身として 「. * 100」が入れてある構造、理解できますか？\n\nこの書き方、argumentの順番さえ間違えなければ。.colsや.fnsを書く必要はないので、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest %>% \n  mutate(across( everything(), ~{.*100}))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n     a1    b1    a2\n  <dbl> <dbl> <dbl>\n1  1200   100  322.\n2  1300   200  354.\n3  1400   300  442.\n```\n:::\n:::\n\n\n\nと書いてもOKです。\n\nでは、.colsで列の選択がtidy-selectを利用できることを確認してみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest %>% \n  mutate(across(starts_with(\"a\"), ~{.*100}))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n     a1    b1    a2\n  <dbl> <dbl> <dbl>\n1  1200     1  322.\n2  1300     2  354.\n3  1400     3  442.\n```\n:::\n:::\n\n\n\nstatrt_withで、ちゃんと、aで始まる列だけ100倍されていますね?\n\n他にも、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest %>% \n  mutate(across(c(a1,b1), ~{.*100}))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n     a1    b1    a2\n  <dbl> <dbl> <dbl>\n1  1200   100  3.22\n2  1300   200  3.54\n3  1400   300  4.42\n```\n:::\n\n```{.r .cell-code}\ntest %>% \n  mutate(across(!b1, ~{.*100}))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n     a1    b1    a2\n  <dbl> <dbl> <dbl>\n1  1200     1  322.\n2  1300     2  354.\n3  1400     3  442.\n```\n:::\n\n```{.r .cell-code}\ntest %>% \n  mutate(across(ends_with(\"2\"), ~{.*100}))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n     a1    b1    a2\n  <dbl> <dbl> <dbl>\n1    12     1  322.\n2    13     2  354.\n3    14     3  442.\n```\n:::\n:::\n\n\n\n等も、なにをしているかお判りでしょうか?\n\nそれでは、次に、もともととりくんでいたデータの集計について、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid <- 1:15\nage <- c(30,40,65,34,86,43,64,26,87,45,76,24,97,45,34)\ngender <- c(\"m\",\"m\",\"f\",\"f\",\"f\",\"m\",\"m\",\"f\",\"f\",\"m\",\"f\",\"f\",\"m\",\"m\",\"m\")\nisx <- c(F,T,F,F,T,T,T,F,T,F,T,F,F,F,T)\n\ntibble(id     = id, \n       age    = age, \n       gender = gender, \n       isx    = isx   ) %>% \n  summarise(\n    age_mean = mean(age),\n    age_min = min(age),\n    age_max = max(age),\n    gender_male_n = sum(gender==\"m\"),\n    gender_male_p = 100*(gender_male_n/n())\n  ) %>% \n  mutate(\n    age_mean = format(round(age_mean,2),nsmall=2),\n    age_min  = format(round(age_min ,2),nsmall=2),\n    age_max  = format(round(age_max ,2),nsmall=2),\n    gender_male_p = format(round(gender_male_p,2),nsmall=2),\n    gender_male_n = format(round(gender_male_n,2),nsmall=2)\n  ) %>% \n  mutate(\n    `年齢:平均(最小-最大)` = str_c(age_mean,\"(\",age_min,\"-\",age_max,\")\"),\n    `性別:男性 人数(%)` = str_c(gender_male_n,\"(\", gender_male_p,\"%)\")\n  ) %>% \n  select(matches(\"^年齢|^性別\")) %>% \n  pivot_longer(cols = everything(),names_to = \" \", values_to = \"合計\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 2\n  ` `                  合計              \n  <chr>                <chr>             \n1 年齢:平均(最小-最大) 53.07(24.00-97.00)\n2 性別:男性 人数(%)    8.00(53.33%)      \n```\n:::\n:::\n\n\n\nこの処理、acrossを利用して、少し簡潔に書いてみてください？\n\n動画をとめてとりくんでみてください。\n\nできましたか?\n\nこう書けます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(id     = id, \n       age    = age, \n       gender = gender, \n       isx    = isx   ) %>% \n  summarise(\n    age_mean = mean(age),\n    age_min = min(age),\n    age_max = max(age),\n    gender_male_n = sum(gender==\"m\"),\n    gender_male_p = 100*(gender_male_n/n())\n  ) %>% \n  mutate(\n    across( everything(), ~{format(round(.,2),nsmall=2)})\n  ) %>%  \n  mutate(\n    `年齢:平均(最小-最大)` = str_c(age_mean,\"(\",age_min,\"-\",age_max,\")\"),\n    `性別:男性 人数(%)` = str_c(gender_male_n,\"(\", gender_male_p,\"%)\")\n  ) %>% \n  select(matches(\"^年齢|^性別\"))  %>% \n  pivot_longer(cols = everything(),names_to = \" \", values_to = \"合計\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 2\n  ` `                  合計              \n  <chr>                <chr>             \n1 年齢:平均(最小-最大) 53.07(24.00-97.00)\n2 性別:男性 人数(%)    8.00(53.33%)      \n```\n:::\n:::\n\n\n\nいかがでしょうか?\n\n```\nmutate(\n  age_mean = format(round(age_mean,2),nsmall=2),\n  age_min  = format(round(age_min ,2),nsmall=2),\n  age_max  = format(round(age_max ,2),nsmall=2),\n  gender_male_p = format(round(gender_male_p,2),nsmall=2),\n  gender_male_n = format(round(gender_male_n,2),nsmall=2)\n)\n```\n\nの部分が、\n\n```\nmutate(across( everything(), ~{format(round(.,2),nsmall=2)}))\n```\n\nたったこれだけになりました。\n\n特に列数が多い場合に、有効な方法になりますので、使えそうであれば、使ってみてください。\n\n以上、単純集計の話でした。\n\n次からは、いよいよ集団で集計する話に進んでいきます。\n\n",
    "supporting": [
      "s06-012_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}