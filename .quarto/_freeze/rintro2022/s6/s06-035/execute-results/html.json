{
  "hash": "376dfcaf996dababe3e28738392ccbc2",
  "result": {
    "markdown": "---\ntitle: :時間の集計 補足\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\n\ndat <- read_csv(\"data/time.csv\")\n\ndat_n1 <- dat %>% \n  arrange(id,med,start) %>% \n  mutate(interv = interval(start, end)) %>% \n  group_by(id, med) %>% \n  mutate(\n    prev_overlap = int_overlaps(interv, lag(interv)),\n    prev_nextday = int_overlaps(interv, int_shift(lag(interv),days(1))),\n  ) %>%\n  mutate(prev_oa = prev_overlap | prev_nextday) %>% \n  replace_na(list(prev_oa = FALSE)) %>% \n  mutate(presc_id = cumsum(!prev_oa)) %>%\n  group_by(id, med, presc_id) %>% \n  summarise(start = min(start), end = max(end)) %>% \n  ungroup() %>% \n  select(id, med, start, end)  \n\ndat_n2 <- dat_n1 %>% \n  arrange(id,med,start) %>% \n  mutate(interv = interval(start, end)) %>% \n  group_by(id, med) %>% \n  mutate(\n    prev_overlap = int_overlaps(interv, lag(interv)),\n    prev_nextday = int_overlaps(interv, int_shift(lag(interv),days(1))),\n  ) %>%\n  mutate(prev_oa = prev_overlap | prev_nextday) %>% \n  replace_na(list(prev_oa = FALSE)) %>% \n  mutate(presc_id = cumsum(!prev_oa)) %>%\n  group_by(id, med, presc_id) %>% \n  summarise(start = min(start), end = max(end)) %>% \n  ungroup() %>% \n  select(id, med, start, end)  \n\ndat_n3 <- dat_n2 %>% \n  arrange(id,med,start) %>% \n  mutate(interv = interval(start, end)) %>% \n  group_by(id, med) %>% \n  mutate(\n    prev_overlap = int_overlaps(interv, lag(interv)),\n    prev_nextday = int_overlaps(interv, int_shift(lag(interv),days(1))),\n  ) %>%\n  mutate(prev_oa = prev_overlap | prev_nextday) %>% \n  replace_na(list(prev_oa = FALSE)) %>% \n  mutate(presc_id = cumsum(!prev_oa)) %>%\n  group_by(id, med, presc_id) %>% \n  summarise(start = min(start), end = max(end)) %>% \n  ungroup() %>% \n  select(id, med, start, end)  \n```\n:::\n\n\n\nここまでの動画で紹介した処理、\nintervalを利用する方法ですが、結構時間がかかってしまっていますR（といいますかプログラミング全般）では、課題の解決に発想を変えると色々簡単になったり、はやくなったりすることも多いので、違うやり方をここでは説明してみます。\n\n解説の都合上、intervalを使って処理するという縛りを自分にかしていたため、この補足動画では、intervalを全く利用せずに、繰り返し処理を利用しない方法を考えてみます。\n\nこの方法、本コースで扱う処理の範囲外となるので、学んでいくとこんな処理も可能なんだ！というくらいの気持ちでみていただけると幸いです。\n\n処理の基本的な考え方、\n\n日付を利用するまえに数字で確認しておきましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tribble(\n  ~id,~m,~s,~e,\n  1,1,1,12,\n  1,1,3,5,\n  1,1,7,14,\n  1,1,16,18,\n  1,1,19,20\n)\n\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n     id     m     s     e\n  <dbl> <dbl> <dbl> <dbl>\n1     1     1     1    12\n2     1     1     3     5\n3     1     1     7    14\n4     1     1    16    18\n5     1     1    19    20\n```\n:::\n:::\n\n\nこのようなデータがあるとして、idは個々の人、mは薬のid、sは開始日、eは終了日だとします。\n\nこのとき、\n\n| id | m | s  | e  |\n|  1 | 1 | 1  | 14 |\n|  1 | 1 | 16 | 20 |\n\nこうなってほしいはずです。\n\nこれ、期間の前後比較をするのではなく、処方された日をまず抽出してから期間を考えるというアプローチをとります。\n\nまず、全ての処方された日を含むベクトルを作成します\n\nこれ、例えば１行目なら１から１２、２行目なら３から５といった具合です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(1:12,3:5,7:14,16:18,19:20)\nv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12  3  4  5  7  8  9 10 11 12 13 14 16 17\n[26] 18 19 20\n```\n:::\n:::\n\n\n\nこのベクトルに含まれる数字が処方された日なので、uniqueで重複を消してからorderで並び替えます\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv2 <- v  %>% unique() %>% {.[order(.)]}\nv2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 16 17 18 19 20\n```\n:::\n:::\n\n\n\nこのベクトルv2に含まれるのが全ての処方日なので、このベクトルの連続した数字の最初と最後を抜き出すと目的の値となります。なので、後は最初のやり方と同じ発想で\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = v2) %>%\n  mutate(diff = x - lag(x)) %>%\n  replace_na(list(diff=1)) %>%\n  mutate(prescid = cumsum(diff > 1)) %>%\n  group_by(prescid) %>%\n  summarise(s = min(x), e = max(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  prescid     s     e\n    <int> <int> <int>\n1       0     1    14\n2       1    16    20\n```\n:::\n:::\n\n\n\n目的とする形にできました。\n\nこの方法の利点は、全ての範囲をまとめてから範囲の計算をするため、複数回の実行が必要ないところです。\n\nデメリットとしては、ネストしたデータフレームという最初に学ぶ時点では少し難易度が高いデータ構造を取り扱う点です。\n\nネストしたデータフレームの詳細については、本コースの対象外です。たいていの表データの処理は、本コースで解説した関数を利用すれば大きな問題なくできるはずなので、まずは本コースの内容にある程度習熟してから、次のような書き方を学んでみてください。\n\nそれでは、処理を簡単に解説しながら行っていきます。\n\nデータの読み込み\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\"data/time.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 400 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): med\ndbl  (1): id\ndate (2): start, end\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n\nネストしたデータの作成\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2 <- dat %>%\n  group_by(id,med) %>%\n  nest()\n\ndat2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 326 × 3\n# Groups:   id, med [326]\n      id med   data            \n   <dbl> <chr> <list>          \n 1     1 A     <tibble [1 × 2]>\n 2     1 B     <tibble [1 × 2]>\n 3     2 A     <tibble [2 × 2]>\n 4     3 A     <tibble [1 × 2]>\n 5     4 B     <tibble [1 × 2]>\n 6     5 A     <tibble [1 × 2]>\n 7     5 B     <tibble [2 × 2]>\n 8     6 A     <tibble [1 × 2]>\n 9     6 B     <tibble [1 × 2]>\n10     7 C     <tibble [1 × 2]>\n# ℹ 316 more rows\n```\n:::\n:::\n\n\n\nこのnestしたデータですが、data列が見慣れないものになっていると思います\n\nこれ、リスト列と呼ばれるもので、１行に１個のtibbleを入れたり、１行に１個のグラフを入れたり、tibbleのセルの中にオブジェクトを入れることができるという形です。こうすることで、dplyrやtidyrを駆使した複雑な処理を、group_byではできない形で１個ずつの「表」に適応することが可能となります\n\n一つの表に対する処理の関数\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproc_row <- function(adata){\n  v <- map(1:nrow(adata), ~{\n    d <- slice(adata,.)\n    c(d$start:d$end)\n  }) %>% \n    unlist() %>%\n    unique()\n  \n  r <- tibble(x = v) %>%\n    arrange(x) %>%\n    mutate(diff = x - lag(x)) %>%\n    replace_na(list(diff=1)) %>%\n    mutate(prescid = cumsum(diff > 1)) %>%\n    group_by(prescid) %>%\n    summarise(s = min(x), e = max(x))\n  \n  return(r)\n  \n}\n```\n:::\n\n\n\nこの関数、何をするかというと、\n\n先ほどのデータ列の１つのセルの中身がこんな表だとして、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2$data[[13]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  start      end       \n  <date>     <date>    \n1 2020-05-26 2020-08-07\n2 2020-05-16 2020-06-12\n```\n:::\n:::\n\n\n\n関数を適応するとこうなります\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproc_row(dat2$data[[13]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  prescid     s     e\n    <int> <int> <int>\n1       0 18398 18481\n```\n:::\n:::\n\n\n\n数字になってしまっていますが、日付型に変えると、うまく変換されているはずです\n\nで、この関数をdata列の各行一つ一つに適応していきます。\n\n普通にmutateしてもうまくいかないので、map関数という関数を利用します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 <- dat2 %>%\n  mutate(res = map(data,proc_row))\n\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 326 × 4\n# Groups:   id, med [326]\n      id med   data             res             \n   <dbl> <chr> <list>           <list>          \n 1     1 A     <tibble [1 × 2]> <tibble [1 × 3]>\n 2     1 B     <tibble [1 × 2]> <tibble [1 × 3]>\n 3     2 A     <tibble [2 × 2]> <tibble [1 × 3]>\n 4     3 A     <tibble [1 × 2]> <tibble [1 × 3]>\n 5     4 B     <tibble [1 × 2]> <tibble [1 × 3]>\n 6     5 A     <tibble [1 × 2]> <tibble [1 × 3]>\n 7     5 B     <tibble [2 × 2]> <tibble [1 × 3]>\n 8     6 A     <tibble [1 × 2]> <tibble [1 × 3]>\n 9     6 B     <tibble [1 × 2]> <tibble [1 × 3]>\n10     7 C     <tibble [1 × 2]> <tibble [1 × 3]>\n# ℹ 316 more rows\n```\n:::\n:::\n\n\n\nこれで、新しく作成されたres列には、data列に含まれていた各表に対して、proc_row関数を適応した結果が挿入されています\n\nあとは、このres列をリストではなく、普通の表として取り出してもとのid,medにくっつけてあげるて、数字ではなく日付型に戻しておきます\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalternate <- dat3 %>%\n  select(id, med, res) %>%\n  unnest(res) %>%\n  select(!prescid) %>%\n  ungroup() %>% \n  mutate(across(c(s,e),as_date))\n\nalternate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 341 × 4\n      id med   s          e         \n   <dbl> <chr> <date>     <date>    \n 1     1 A     2020-04-14 2020-05-07\n 2     1 B     2020-04-01 2020-04-09\n 3     2 A     2020-05-12 2020-06-30\n 4     3 A     2020-05-31 2020-08-01\n 5     4 B     2020-04-03 2020-06-04\n 6     5 A     2020-04-26 2020-07-09\n 7     5 B     2020-04-15 2020-05-10\n 8     6 A     2020-05-16 2020-06-14\n 9     6 B     2020-05-02 2020-05-07\n10     7 C     2020-05-28 2020-06-27\n# ℹ 331 more rows\n```\n:::\n:::\n\n\n\nこの、別の方法をとって作成したalternateと、ひとつ前の動画までのやり方で作成したdat_n3の集計結果が一致するかを確認しておきましょう\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_n3 %>% \n  group_by(med) %>% \n  summarise(\n    min_kikan = min(end-start),\n    max_kikan = max(end-start),\n    avg_kikan = mean(end-start)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  med   min_kikan max_kikan avg_kikan    \n  <chr> <drtn>    <drtn>    <drtn>       \n1 A     3 days    135 days  54.87786 days\n2 B     1 days    126 days  58.81308 days\n3 C     1 days    130 days  48.01942 days\n```\n:::\n\n```{.r .cell-code}\nalternate %>% \n  group_by(med) %>% \n  summarise(\n    min_kikan = min (e-s),\n    max_kikan = max (e-s),\n    avg_kikan = mean(e-s)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  med   min_kikan max_kikan avg_kikan    \n  <chr> <drtn>    <drtn>    <drtn>       \n1 A     3 days    135 days  54.87786 days\n2 B     1 days    126 days  58.81308 days\n3 C     1 days    130 days  48.01942 days\n```\n:::\n:::\n\n\n\nいかがでしょうか？\n\n集計結果は一致していますね？\n\nなれると、複雑な加工は、nestしたデータに対して、処理を行う形をすると、すっきりと書くことができるので、必要があればこの書き方を試していただいてもよいと思います。\n\nそれでは、最後のセクション、レポートの作成に進んでいきましょう\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}