{
  "hash": "1075bf6e0de7b223d0faab5e54b1ba30",
  "result": {
    "markdown": "---\ntitle: summariseの中で動く特別な関数\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndat <- tibble(\n  num = 1:10,\n  fac2 = rep(c(\"a\",\"b\"), 5),\n  fac3 = rep(c(\"A\",\"B\",\"C\"), 4)[1:10]\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n?summarise\n```\n:::\n\n\n\nの中の、Useful functionsというところをみていただくと、いくつか関数が紹介されています\n\nこの中で、n()という関数だけは、dplyrのsummarise, mutate, filter等の中でだけしか使えない特別な関数となっています。\n\nその動作は、summarise,mutate,filterに与えられたデータの列数を取得するというものになります。\n\n試しに、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `n()`:\n! Must only be used inside data-masking verbs like `mutate()`,\n  `filter()`, and `group_by()`.\n```\n:::\n:::\n\n\n\n単独で呼び出しても、dplyr verbsの中でしか使えませんと怒られます。\n\nしかし、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  summarise(\n    number1 = n(),\n    number2 = length(num)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  number1 number2\n    <int>   <int>\n1      10      10\n```\n:::\n\n```{.r .cell-code}\nnrow(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n\nいかがでしょう？\n\nn()を利用することでこれまでlength(列名)としていたものをだいぶ簡略化できましたね？\n\nデータ加工では割合の計算や、統計的な計算でも頻用する関数になるのでここで是非理解しておいてください。\n\n次の動画では、スライドでお示しした、ケーキの購入データを例にして、データの単純集計を行ってみましょう。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}