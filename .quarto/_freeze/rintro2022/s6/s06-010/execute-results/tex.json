{
  "hash": "d87be678379cafb6c9208881b2a7464d",
  "result": {
    "markdown": "---\ntitle: 全体集計の実践(tidyverse)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nid <- 1:15\nage <- c(30,40,65,34,86,43,64,26,87,45,76,24,97,45,34)\ngender <- c(\"m\",\"m\",\"f\",\"f\",\"f\",\"m\",\"m\",\"f\",\"f\",\"m\",\"f\",\"f\",\"m\",\"m\",\"m\")\nisx <- c(F,T,F,F,T,T,T,F,T,F,T,F,F,F,T)\n\ndat <- tibble(id     = id, \n              age    = age, \n              gender = gender, \n              isx    = isx   )\n```\n:::\n\n\n\nそれでは、\n\n|年齢:平均(最小-最大)| XX.XX(XX-XX)|\n|性別:男性 人数(%)   | XX(XX.X%)   |\n\nという形の結果を求めてみましょう。\nまずは集計です\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  summarise(\n    age_mean = mean(age),\n    age_min  = min(age),\n    age_max  = max(age),\n    gender_male_n = sum(gender==\"m\"),\n    gender_male_p = 100*(gender_male_n/n())\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 5\n  age_mean age_min age_max gender_male_n gender_male_p\n     <dbl>   <dbl>   <dbl>         <int>         <dbl>\n1     53.1      24      97             8          53.3\n```\n:::\n:::\n\n\n\nできましたね?\n次に結果となる列を作成してみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  summarise(\n    age_mean = mean(age),\n    age_min  = min(age),\n    age_max  = max(age),\n    gender_male_n = sum(gender==\"m\"),\n    gender_male_p = 100*(gender_male_n/n())\n  ) %>% \n  mutate(\n    `年齢:平均(最小-最大)` = str_c(age_mean,\"(\",age_min,\"-\",age_max,\")\"),\n    `性別:男性 人数(%)`    = str_c(gender_male_n,\"(\", gender_male_p,\"%)\")\n  ) %>% \n  select(matches(\"^年齢|^性別\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  `年齢:平均(最小-最大)`  `性別:男性 人数(%)` \n  <chr>                   <chr>               \n1 53.0666666666667(24-97) 8(53.3333333333333%)\n```\n:::\n:::\n\n\nここでmatchesは正規表現で列名を指定することが、\n可能です\nここまでの結果なにかがへんです。\n\nここで、結果を文字列に変更して、str_c関数で文字列同士\nの結合をしているのですが、\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- mean(dat$age)\ny <- min(dat$age)\nz <- max(dat$age)\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 53.06667\n```\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24\n```\n:::\n\n```{.r .cell-code}\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 97\n```\n:::\n\n```{.r .cell-code}\nstr_c(x,\"(\",y,\"-\",z,\")\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"53.0666666666667(24-97)\"\n```\n:::\n:::\n\n\n\nこのように、年齢の平均値の桁数がものすごく長い形で文字列に変更されてしまっています。\n\nこれは、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"53.0666666666667\"\n```\n:::\n:::\n\n\n\nで変換しても同じ様な問題が生じるので、「うまい形に変換」してあげる必要があります。\n\nこの場合、利用するのはformat関数が有名です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat(1.234567,digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"\n```\n:::\n\n```{.r .cell-code}\nformat(1.234567,digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.2\"\n```\n:::\n\n```{.r .cell-code}\nformat(1.234567,digits = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.23\"\n```\n:::\n\n```{.r .cell-code}\nformat(1.234567,digits = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.235\"\n```\n:::\n\n```{.r .cell-code}\nformat(1.234567,digits = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.2346\"\n```\n:::\n:::\n\n\n\nこのようなかたちで、digitsで桁数を指定してあげると頭からの桁数を指定して、四捨五入をしたうえで文字に変換してくれます。ただしこれだと、小数点2桁に固定して表示したいような場合は、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat(2.345, digits=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2.35\"\n```\n:::\n\n```{.r .cell-code}\nformat(234.567, digits=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"235\"\n```\n:::\n:::\n\n\n\n整数部分の桁数に影響を受けるため、うまくいきません。\n\nかならず小数点2桁で表示したいというケースでは、小数点を指定して四捨五入してくれる、round関数を併用するとうまくいきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(  2.3454656456454456,2) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.35\n```\n:::\n\n```{.r .cell-code}\nround(234.5676456456456456,2) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 234.57\n```\n:::\n\n```{.r .cell-code}\nformat(round(  2.3454656456454456,2) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2.35\"\n```\n:::\n\n```{.r .cell-code}\nformat(round(234.5676456456456456,2) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"234.57\"\n```\n:::\n:::\n\n\nこのように、round関数と組み合わせてあげると、うまくいきます。\n\nただし、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat(round(2  ,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2\"\n```\n:::\n\n```{.r .cell-code}\nformat(round(2.1,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2.1\"\n```\n:::\n:::\n\n\n\nこのように、「整数」の場合や小数の長さが目的の長さに足りない場合は小数点2桁を印字してくれないので、format の　nsmall引数を利用します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat(1.0123, nsmall=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.0123\"\n```\n:::\n\n```{.r .cell-code}\nformat(round(2  ,2), nsmall = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2.00\"\n```\n:::\n\n```{.r .cell-code}\nformat(round(2.1,2), nsmall = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2.10\"\n```\n:::\n:::\n\n\n\nこれは「表示されないといけない」小数の桁数を指定してあげると、0で埋めてくれます。\n\nというわけで\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(x,\"(\",y,\"-\",z,\")\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"53.0666666666667(24-97)\"\n```\n:::\n:::\n\n\n\nは、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx2 <- format(round(x,2),nsmall=2)\ny2 <- format(round(y,2),nsmall=2)\nz2 <- format(round(z,2),nsmall=2)\n\nstr_c(x2,\"(\",y2,\"-\",z2,\")\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"53.07(24.00-97.00)\"\n```\n:::\n:::\n\n\n\nという形で表示できました。\n\nでは、今の知識を利用して、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  summarise(\n    age_mean      = mean(age),\n    age_min       = min(age),\n    age_max       = max(age),\n    gender_male_n = sum(gender==\"m\"),\n    gender_male_p = 100*(gender_male_n/n())\n  ) %>% \n  mutate(\n    `年齢:平均(最小-最大)` = str_c(age_mean,\"(\",age_min,\"-\",age_max,\")\"),\n    `性別:男性 人数(%)`    = str_c(gender_male_n,\"(\", gender_male_p,\"%)\")\n  ) %>% \n  select(matches(\"^年齢|^性別\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  `年齢:平均(最小-最大)`  `性別:男性 人数(%)` \n  <chr>                   <chr>               \n1 53.0666666666667(24-97) 8(53.3333333333333%)\n```\n:::\n:::\n\n\n\nの表示を良い感じにするのであれば、mutate部分で利用する変数の数字にformatと、roundを入れてあげればよいです。5個の変数全てに適応してあげましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  summarise(\n    age_mean      = mean(age),\n    age_min       = min(age),\n    age_max       = max(age),\n    gender_male_n = sum(gender==\"m\"),\n    gender_male_p = 100*(gender_male_n/n())\n  ) %>% \n  mutate(\n    age_mean      = format(round(age_mean,2),nsmall=2),\n    age_min       = format(round(age_min ,2),nsmall=2),\n    age_max       = format(round(age_max ,2),nsmall=2),\n    gender_male_p = format(round(gender_male_p,2),nsmall=2),\n    gender_male_n = format(round(gender_male_n,2),nsmall=2)\n  ) %>% \n  mutate(\n    `年齢:平均(最小-最大)` = str_c(age_mean,\"(\",age_min,\"-\",age_max,\")\"),\n    `性別:男性 人数(%)`    = str_c(gender_male_n,\"(\", gender_male_p,\"%)\")\n  ) %>% \n  select(matches(\"^年齢|^性別\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  `年齢:平均(最小-最大)` `性別:男性 人数(%)`\n  <chr>                  <chr>              \n1 53.07(24.00-97.00)     8.00(53.33%)       \n```\n:::\n:::\n\n\n\nはい。うまく表示できましたね?\n\nただ、1回目のmutate部分で、format...の部分変数名を入れ替えて繰り返しているだけになっており、面倒ではありませんでしたか?次の動画で、このように「同じ操作を複数列に行う」ケースのもっと短い書き方をお伝えいたします。\n\n",
    "supporting": [
      "s06-010_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}