{
  "hash": "799ee443ebfbc205c919ce901235289d",
  "result": {
    "markdown": "---\ntitle: シンプルな書き方での演算(dplyr::summarise)\npage-layout: full\ntitle-block-banner: true\ncomments: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndat <- tibble(\n  num = 1:10,\n  fac2 = rep(c(\"a\",\"b\"), 5),\n  fac3 = rep(c(\"A\",\"B\",\"C\"), 4)[1:10]\n)\n```\n:::\n\n\n\n方法2: DplyrのSummarise関数\n\n実はDplyrには、attachと似たように利用できる`summarise`関数というものがあります。\n\n単純集計やグループ集計を行う場合に必須の関数になるため、単独での動きをしっかりと理解しておきましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  summarise(\n    kosu  = length(num),\n    mean1 = sum(num)/length(num),\n    mean2 = mean(num)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n   kosu mean1 mean2\n  <int> <dbl> <dbl>\n1    10   5.5   5.5\n```\n:::\n:::\n\n\n\nだいぶattachと挙動が違いますがじっくりとみてみましょう\n\ndatというデータを%>%でsummariseに与えてあげると、summariseの中では列名を書くだけでそのベクトルを利用することができます\n\nsummarieの中で、<新しい列名>=<ベクトル演算>とすることで、その列名にベクトルの演算結果がでてきます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(dat$num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nsum(dat$num)/length(dat$num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.5\n```\n:::\n\n```{.r .cell-code}\nmean(dat$num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.5\n```\n:::\n:::\n\n\n\nこれらの結果と、\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  summarise(\n    kosu  = length(num),\n    mean1 = sum(num)/length(num),\n    mean2 = mean(num)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n   kosu mean1 mean2\n  <int> <dbl> <dbl>\n1    10   5.5   5.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nこの動作、同じ結果ですね?\n\nこのスクリプトの動作、腹落ちしましたか？\n\nこの書き方の利点は、numという名前の変数がグローバル環境にあったとしても、問題なく意図した動作をしてくれるというところにあります。\n\nEnvironmentペーンを確認いただきたいのですが、ここまでのsummarise関数の実行時に、numという変数が存在している状態でした。しかし、それには影響を受けずに、与えられたデータ/tibbleの列名がついたベクトルを取り出すことができています。この特徴があるため、attachを使うよりも思わぬエラーが回避できると思います。\n\nまた、summarise関数の中でだけ動作する特別な関数もあるので次の動画ではその説明を行います。\n\n",
    "supporting": [
      "s06-006_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}